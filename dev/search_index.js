var documenterSearchIndex = {"docs":
[{"location":"graphs_type/#Graph-Types","page":"Graph representation","title":"Graph Types","text":"","category":"section"},{"location":"graphs_type/","page":"Graph representation","title":"Graph representation","text":"When creating Graphon objects, we can specify the type of graph to be sampled. By default, the sampled graphs are dense matrices. However, we can specify SparseMatrixCSC to obtain sparse graphs (should be supported by default), but other types are also possible.","category":"page"},{"location":"graphs_type/","page":"Graph representation","title":"Graph representation","text":"info: Work in Progress\nThis section is a work in progress. More graph types will be added in the future.","category":"page"},{"location":"graphs_type/#Design-Philosophy","page":"Graph representation","title":"Design Philosophy","text":"","category":"section"},{"location":"graphs_type/","page":"Graph representation","title":"Graph representation","text":"One of the main difficulties is that we cannot know what value is used to represent a non-edge in a decorated graph type. For example, for a simple graph encoded in a BitMatrix, a non-edge is represented by false. But for a weighted graph encoded in a Matrix{Float64}, there is no necessarily a default value for a non-edge. It could be 0.0, NaN, or any other value.","category":"page"},{"location":"graphs_type/","page":"Graph representation","title":"Graph representation","text":"To circumvent this issue, we have decided to let the user define how to create an empty graph of a given type if the default is not suitable. This means that the function to randomly sample a graph with preallocated memory now expects that the input graph is empty and of the right size.","category":"page"},{"location":"graphs_type/","page":"Graph representation","title":"Graph representation","text":"Graphons._rand!","category":"page"},{"location":"graphs_type/#Graphons._rand!","page":"Graph representation","title":"Graphons._rand!","text":"_rand!(rng::AbstractRNG, f::AbstractGraphon{T,M}, A::M, ξs)\n\nGenerates a random graph according to the graphon `f` and the latent positions `ξs`.\nThe generated graph is stored in `A`.\n\nwarning: Warning\nThis function expects that A is an empty graph of the right size and type. It does not try to clean it up before filling it. See make_empty_graph for more details.\n\n\n\n\n\n","category":"function"},{"location":"graphs_type/#Custom-Graph-Types","page":"Graph representation","title":"Custom Graph Types","text":"","category":"section"},{"location":"graphs_type/","page":"Graph representation","title":"Graph representation","text":"To sample with your own graph type, you need to redefine the function make_empty_graph(::Type{M}, n), such that it returns an empty graph of type M with n nodes and no edges.","category":"page"},{"location":"graphs_type/","page":"Graph representation","title":"Graph representation","text":"info: Design Choice\nSince for decorated graphs it is sometimes hard to know in advance what will be the default representation of a non-edge, we have left that choice to the user via the make_empty_graph function.","category":"page"},{"location":"graphs_type/","page":"Graph representation","title":"Graph representation","text":"An example of a custom graph type is provided in ext/SuiteSparseGraphBLAS.jl, which uses the SuiteSparseGraphBLAS package to create large sparse graphs efficiently.","category":"page"},{"location":"graphs_type/","page":"Graph representation","title":"Graph representation","text":"function make_empty_graph(::Type{GB}, n) where {GB<:GBMatrix}\n    return GB(n, n)\nend","category":"page"},{"location":"graphs_type/","page":"Graph representation","title":"Graph representation","text":"This allows us to create a Graphon object that will sample graphs of type GBMatrix:","category":"page"},{"location":"graphs_type/","page":"Graph representation","title":"Graph representation","text":"using SuiteSparseGraphBLAS\nf_sparseBLAS = SimpleContinuousGraphon((x,y)-> 0.1, GBMatrix{Bool})\nA = rand(f_sparseBLAS, 41)","category":"page"},{"location":"internal/#Index","page":"Index","title":"Index","text":"","category":"section"},{"location":"internal/","page":"Index","title":"Index","text":"Modules = [Graphons]","category":"page"},{"location":"internal/#Graphons.AbstractGraphon","page":"Index","title":"Graphons.AbstractGraphon","text":"AbstractGraphon{T,M}\n\nT is the edge type:\n\nBool for a simple graph\n<:Real for a weighted graph\n<:AbstractVector{Bool} for a multiplex network\n...\n\nM is the type of the representation of the sampled graph from the graphon, e.g. a simple graph with boolean edges can be represented by     - a dense matrix of Bool -> M = Matrix{Bool}     - a sparse matrix of Bool -> M = SparseMatrixCSC{Bool,Int}     - an adjacency list -> M = Vector{Vector{Int}}\n\nfor now we assume that M is such that T <: eltype(M) and that it can be created with     make_empty_graph(M, n) which creates an empty graph of size n x n\n\n\n\n\n\n","category":"type"},{"location":"internal/#Base.rand-Union{Tuple{M}, Tuple{T}, Tuple{Random.AbstractRNG, Graphons.AbstractGraphon{T, M}, Int64}} where {T, M}","page":"Index","title":"Base.rand","text":"rand(rng::AbstractRNG, f::AbstractGraphon{T,M}, n::Int) where {T,M}\n\nGenerates a random graph according to the graphon `f` with `n` nodes.\nThe latent positions are drawn uniformly at random in [0,1].\n\nThe generated graph is of type `M` and has edge type `T`.\n\n\n\n\n\n","category":"method"},{"location":"internal/#Graphons._rand!-Tuple{Random.AbstractRNG, Graphons.AbstractGraphon, Any, Any}","page":"Index","title":"Graphons._rand!","text":"_rand!(rng::AbstractRNG, f::AbstractGraphon{T,M}, A::M, ξs)\n\nGenerates a random graph according to the graphon `f` and the latent positions `ξs`.\nThe generated graph is stored in `A`.\n\nwarning: Warning\nThis function expects that A is an empty graph of the right size and type. It does not try to clean it up before filling it. See make_empty_graph for more details.\n\n\n\n\n\n","category":"method"},{"location":"internal/#Graphons.sample-Tuple{Random.AbstractRNG, Graphons.AbstractGraphon, Int64}","page":"Index","title":"Graphons.sample","text":"sample(rng::AbstractRNG, f::AbstractGraphon, n::Int)\n\nGenerates a random graph according to the graphon `f` with `n` nodes.\nThe latent positions are drawn uniformly at random in [0,1].\n\nThe generated graph is of type `M` and has edge type `T`.\n\n\n\n\n\n","category":"method"},{"location":"tutorials/01_simple_graphon/","page":"First steps","title":"First steps","text":"EditURL = \"../../literate/tutorials/01_simple_graphon.jl\"","category":"page"},{"location":"tutorials/01_simple_graphon/#A-Simple-Graphon-Introduction","page":"First steps","title":"A Simple Graphon Introduction","text":"","category":"section"},{"location":"tutorials/01_simple_graphon/","page":"First steps","title":"First steps","text":"This tutorial introduces the concept of a graphon, demonstrates how to sample a graph from one using Graphon.jl.","category":"page"},{"location":"tutorials/01_simple_graphon/#What-is-a-Graphon?","page":"First steps","title":"What is a Graphon?","text":"","category":"section"},{"location":"tutorials/01_simple_graphon/","page":"First steps","title":"First steps","text":"A graphon (or graph function) is a symmetric, measurable function","category":"page"},{"location":"tutorials/01_simple_graphon/","page":"First steps","title":"First steps","text":"W 0 1^2 to 0 1","category":"page"},{"location":"tutorials/01_simple_graphon/","page":"First steps","title":"First steps","text":"A graph with n nodes is then generated in the following manner:  For each node, i a latent variable xi_i sim U01 is drawn independently of the others","category":"page"},{"location":"tutorials/01_simple_graphon/","page":"First steps","title":"First steps","text":"It serves as a generative model for random graphs. Think of it as a continuous and more general version of a stochastic block model.","category":"page"},{"location":"tutorials/01_simple_graphon/","page":"First steps","title":"First steps","text":"In simple terms, each node i in a graph is assigned a latent (unobserved) position ξ_i in 0 1. The probability of an edge existing between two nodes i and j is then given by the graphon function evaluated at their latent positions:","category":"page"},{"location":"tutorials/01_simple_graphon/","page":"First steps","title":"First steps","text":"PA_ij = 1 mid xi_ixi_j = W(xi_ixi_j)","category":"page"},{"location":"tutorials/01_simple_graphon/","page":"First steps","title":"First steps","text":"This is an example of a simple graphon, which is used to generate simple binary undirected graphs. In subsequent tutorials, we will show that we can generalise this idea to much more general kind of graphs (weighted, signed, multiplex...).","category":"page"},{"location":"tutorials/01_simple_graphon/#Using-Graphon.jl-to-deal-with-Graphon","page":"First steps","title":"Using Graphon.jl to deal with Graphon","text":"","category":"section"},{"location":"tutorials/01_simple_graphon/","page":"First steps","title":"First steps","text":"We will be interested in a common graphon encountered in the litterature: W(xy)=x*y. This graphon is a Graphon.","category":"page"},{"location":"tutorials/01_simple_graphon/","page":"First steps","title":"First steps","text":"using Graphons\n\nfunction W(x, y)\n    return x * y\nend\n\nf = SimpleContinuousGraphon(W);\nnothing #hide","category":"page"},{"location":"tutorials/01_simple_graphon/","page":"First steps","title":"First steps","text":"We can also easily request a coarser version of the graphon, in the form of a stochastic block model with k blocks. This is done using the empirical_graphon function:","category":"page"},{"location":"tutorials/01_simple_graphon/","page":"First steps","title":"First steps","text":"step_graphon = empirical_graphon(f, 10);\nnothing #hide","category":"page"},{"location":"tutorials/01_simple_graphon/","page":"First steps","title":"First steps","text":"We can visualize this graphon using the any backend available in Makie.jl package. Here we will use CairoMakie.jl:","category":"page"},{"location":"tutorials/01_simple_graphon/","page":"First steps","title":"First steps","text":"using CairoMakie\n\nfig = Figure(size=(800, 380))\nax = Axis(fig[1, 1], aspect=1)\nax2 = Axis(fig[1, 2], aspect=1)\nxlims!(ax, 0, 1)# hide\nylims!(ax, 0, 1) # hide\nxlims!(ax2, 0, 1) # hide\nylims!(ax2, 0, 1) # hide\nhm = heatmap!(ax, f, colormap=:binary, colorrange=(0, 1))\nhm2 = heatmap!(ax2, step_graphon, colormap=:binary, colorrange=(0, 1))\nColorbar(fig[1, 3], hm)\nfig","category":"page"},{"location":"tutorials/01_simple_graphon/#Sampling-Graphs-from-a-Graphon","page":"First steps","title":"Sampling Graphs from a Graphon","text":"","category":"section"},{"location":"tutorials/01_simple_graphon/","page":"First steps","title":"First steps","text":"now that we have defined our graphon, we can sample graphs of different sizes with it:","category":"page"},{"location":"tutorials/01_simple_graphon/","page":"First steps","title":"First steps","text":"using Random\nA_medium = rand(f, 11)","category":"page"},{"location":"tutorials/01_simple_graphon/","page":"First steps","title":"First steps","text":"The above call will generate 10 random latent variables, and then sample the graph according to these random latents. In some settings we might be interested in knowing the latents for each of the nodes (e.g. for simulations). This is also possible easily:","category":"page"},{"location":"tutorials/01_simple_graphon/","page":"First steps","title":"First steps","text":"ξs = 0:0.1:1\nA_ordered = sample(f, ξs)","category":"page"},{"location":"tutorials/01_simple_graphon/#Specifying-the-type-of-the-sampled-graph","page":"First steps","title":"Specifying the type of the sampled graph","text":"","category":"section"},{"location":"tutorials/01_simple_graphon/","page":"First steps","title":"First steps","text":"using SparseArrays\nM = SparseMatrixCSC{Bool,Int}\nf_sparse = SimpleContinuousGraphon(W, M)\nrand(f_sparse, 41)","category":"page"},{"location":"tutorials/01_simple_graphon/","page":"First steps","title":"First steps","text":"and we can see the impact of ordering the latents","category":"page"},{"location":"tutorials/01_simple_graphon/","page":"First steps","title":"First steps","text":"sample(f_sparse, 0:0.025:1)","category":"page"},{"location":"tutorials/01_simple_graphon/","page":"First steps","title":"First steps","text":"","category":"page"},{"location":"tutorials/01_simple_graphon/","page":"First steps","title":"First steps","text":"This page was generated using Literate.jl.","category":"page"},{"location":"","page":"Home","title":"Home","text":"CurrentModule = Graphons","category":"page"},{"location":"#Graphon","page":"Home","title":"Graphon","text":"","category":"section"},{"location":"","page":"Home","title":"Home","text":"Documentation for Graphons.","category":"page"}]
}
