var documenterSearchIndex = {"docs":
[{"location":"tutorials/01_simple_graphon/","page":"First steps","title":"First steps","text":"EditURL = \"../../literate/tutorials/01_simple_graphon.jl\"","category":"page"},{"location":"tutorials/01_simple_graphon/#A-Simple-Graphon-Introduction","page":"First steps","title":"A Simple Graphon Introduction","text":"","category":"section"},{"location":"tutorials/01_simple_graphon/","page":"First steps","title":"First steps","text":"This tutorial introduces the concept of a graphon, demonstrates how to sample a graph from one using Graphon.jl.","category":"page"},{"location":"tutorials/01_simple_graphon/#What-is-a-Graphon?","page":"First steps","title":"What is a Graphon?","text":"","category":"section"},{"location":"tutorials/01_simple_graphon/","page":"First steps","title":"First steps","text":"A graphon (or graph function) is a symmetric, measurable function W 0 1^2 to 0 1. A graph with n nodes is then generated in the following manner:  For each node, i a latent variable xi_i sim U01 is drawn independently of the others","category":"page"},{"location":"tutorials/01_simple_graphon/","page":"First steps","title":"First steps","text":"It serves as a generative model for random graphs. Think of it as a continuous and more general version of a stochastic block model.","category":"page"},{"location":"tutorials/01_simple_graphon/","page":"First steps","title":"First steps","text":"In simple terms, each node i in a graph is assigned a latent (unobserved) position ξ_i in 0 1. The probability of an edge existing between two nodes i and j is then given by the graphon function evaluated at their latent positions: PA_ij = 1 mid xi_ixi_j = W(xi_ixi_j)","category":"page"},{"location":"tutorials/01_simple_graphon/","page":"First steps","title":"First steps","text":"This is an example of a simple graphon, which is used to generate simple binary undirected graphs. In subsequent tutorials, we will show that we can generalise this idea to much more general kind of graphs (weighted, signed, multiplex, temporal,...).","category":"page"},{"location":"tutorials/01_simple_graphon/#Using-Graphon.jl-to-deal-with-Graphon","page":"First steps","title":"Using Graphon.jl to deal with Graphon","text":"","category":"section"},{"location":"tutorials/01_simple_graphon/","page":"First steps","title":"First steps","text":"We will be interested in a common graphon encountered in the litterature: W(xy)=x*y. This graphon is a Graphon.","category":"page"},{"location":"tutorials/01_simple_graphon/","page":"First steps","title":"First steps","text":"using Graphons\n\nfunction W(x, y)\n    return x * y\nend\n\nf = SimpleContinuousGraphon(W);\nnothing #hide","category":"page"},{"location":"tutorials/01_simple_graphon/","page":"First steps","title":"First steps","text":"now that we have defined our graphon, we can sample graphs of different sizes with it:","category":"page"},{"location":"tutorials/01_simple_graphon/","page":"First steps","title":"First steps","text":"using Random\nA_medium = rand(f, 11)","category":"page"},{"location":"tutorials/01_simple_graphon/","page":"First steps","title":"First steps","text":"The above call will generate 10 random latent variables, and then sample the graph according to these random latents. In some settings we might be interested in knowing the latents for each of the nodes (e.g. for simulations). This is also possible easily:","category":"page"},{"location":"tutorials/01_simple_graphon/","page":"First steps","title":"First steps","text":"ξs = 0:0.1:1\nA_ordered = sample(f, ξs)","category":"page"},{"location":"tutorials/01_simple_graphon/#Specifying-the-type-of-the-sampled-graph","page":"First steps","title":"Specifying the type of the sampled graph","text":"","category":"section"},{"location":"tutorials/01_simple_graphon/","page":"First steps","title":"First steps","text":"using SparseArrays\nM = SparseMatrixCSC{Bool,Int}\nf_sparse = SimpleContinuousGraphon(W, M)\nrand(f_sparse, 41)","category":"page"},{"location":"tutorials/01_simple_graphon/","page":"First steps","title":"First steps","text":"and we can see the impact of ordering the latents","category":"page"},{"location":"tutorials/01_simple_graphon/","page":"First steps","title":"First steps","text":"sample(f_sparse, 0:0.025:1)","category":"page"},{"location":"tutorials/01_simple_graphon/","page":"First steps","title":"First steps","text":"We can also use the SuiteSparseGraphBLAS package to sample large sparse graphs efficiently:","category":"page"},{"location":"tutorials/01_simple_graphon/","page":"First steps","title":"First steps","text":"using SuiteSparseGraphBLAS\nM2 = GBMatrix{Bool,Bool}\nf_sparseBLAS = SimpleContinuousGraphon(W, M2)\nrand(f_sparseBLAS, 41);\nnothing #hide","category":"page"},{"location":"tutorials/01_simple_graphon/","page":"First steps","title":"First steps","text":"","category":"page"},{"location":"tutorials/01_simple_graphon/","page":"First steps","title":"First steps","text":"This page was generated using Literate.jl.","category":"page"},{"location":"","page":"Home","title":"Home","text":"CurrentModule = Graphons","category":"page"},{"location":"#Graphon","page":"Home","title":"Graphon","text":"","category":"section"},{"location":"","page":"Home","title":"Home","text":"Documentation for Graphons.","category":"page"},{"location":"","page":"Home","title":"Home","text":"","category":"page"},{"location":"","page":"Home","title":"Home","text":"Modules = [Graphons]","category":"page"},{"location":"#Graphons.AbstractGraphon","page":"Home","title":"Graphons.AbstractGraphon","text":"AbstractGraphon{T,M}\n\nT is the edge type:\n\nBool for a simple graph\n<:Real for a weighted graph\n<:AbstractVector{Bool} for a multiplex network\n...\n\nM is the type of the representation of the sampled graph from the graphon, e.g. a simple graph with boolean edges can be represented by     - a dense matrix of Bool -> M = Matrix{Bool}     - a sparse matrix of Bool -> M = SparseMatrixCSC{Bool,Int}     - an adjacency list -> M = Vector{Vector{Int}}\n\nfor now we assume that M is such that T <: eltype(M) and that it can be created with     make_empty_graph(M, n) which creates an empty graph of size n x n\n\n\n\n\n\n","category":"type"}]
}
