var documenterSearchIndex = {"docs":
[{"location":"tutorials/#Tutorials","page":"Tutorials","title":"Tutorials","text":"","category":"section"},{"location":"tutorials/","page":"Tutorials","title":"Tutorials","text":"This section contains step-by-step tutorials to help you get started with Graphons.jl.","category":"page"},{"location":"tutorials/#Getting-Started","page":"Tutorials","title":"Getting Started","text":"","category":"section"},{"location":"tutorials/","page":"Tutorials","title":"Tutorials","text":"Getting Started with Graphons - Learn the basics of graphon models, how to define simple continuous graphons, and sample random graphs from them.\nStochastic Block Models - Explore block models with community structure, core-periphery patterns, and hierarchical organization. Learn how to discretize continuous graphons.","category":"page"},{"location":"tutorials/#Advanced-Topics","page":"Tutorials","title":"Advanced Topics","text":"","category":"section"},{"location":"tutorials/","page":"Tutorials","title":"Tutorials","text":"Multiplex Networks with Decorated Graphons - Explore decorated graphons for modeling multiplex networks with multiple edge types or layers, including marginal probabilities and cross-layer correlations.\nCustom Distributions - Learn how to implement custom distribution types for specialized edge attributes and sampling logic beyond what Distributions.jl provides.","category":"page"},{"location":"custom_distributions/#Custom-Distribution-Types","page":"Custom Distribution Types","title":"Custom Distribution Types","text":"","category":"section"},{"location":"custom_distributions/","page":"Custom Distribution Types","title":"Custom Distribution Types","text":"When using DecoratedGraphon, the graphon function returns a distribution object that is sampled to generate edge values. While Graphons.jl is designed to work with distributions from Distributions.jl, you can use custom distribution types as long as they implement the required interface.","category":"page"},{"location":"custom_distributions/#Required-Methods","page":"Custom Distribution Types","title":"Required Methods","text":"","category":"section"},{"location":"custom_distributions/","page":"Custom Distribution Types","title":"Custom Distribution Types","text":"A custom distribution type D must implement the following methods:","category":"page"},{"location":"custom_distributions/","page":"Custom Distribution Types","title":"Custom Distribution Types","text":"Base.rand(rng::AbstractRNG, d::D) - Sample a single value from the distribution\nBase.eltype(d::D) - Return the element type of samples from the distribution","category":"page"},{"location":"custom_distributions/","page":"Custom Distribution Types","title":"Custom Distribution Types","text":"These are the minimal requirements for a distribution to work with DecoratedGraphon.","category":"page"},{"location":"custom_distributions/#Optional-Methods","page":"Custom Distribution Types","title":"Optional Methods","text":"","category":"section"},{"location":"custom_distributions/","page":"Custom Distribution Types","title":"Custom Distribution Types","text":"For better integration with the package, you may also want to implement:","category":"page"},{"location":"custom_distributions/","page":"Custom Distribution Types","title":"Custom Distribution Types","text":"Distributions.params(d::D) - Return the parameters of the distribution (for display/debugging)\nBase.show(io::IO, d::D) - Custom string representation","category":"page"},{"location":"custom_distributions/#Example:-Custom-Discrete-Distribution","page":"Custom Distribution Types","title":"Example: Custom Discrete Distribution","text":"","category":"section"},{"location":"custom_distributions/","page":"Custom Distribution Types","title":"Custom Distribution Types","text":"Here's an example of a simple custom distribution that samples from a fixed set of values:","category":"page"},{"location":"custom_distributions/","page":"Custom Distribution Types","title":"Custom Distribution Types","text":"struct CustomCategorical{T}\n    values::Vector{T}\n    probabilities::Vector{Float64}\n\n    function CustomCategorical(values::Vector{T}, probs::Vector{Float64}) where T\n        @assert length(values) == length(probs)\n        @assert sum(probs) ≈ 1.0\n        @assert all(p >= 0 for p in probs)\n        new{T}(values, probs)\n    end\nend\n\n# Required: sampling method\nfunction Base.rand(rng::AbstractRNG, d::CustomCategorical)\n    u = rand(rng)\n    cumsum_prob = 0.0\n    for (val, prob) in zip(d.values, d.probabilities)\n        cumsum_prob += prob\n        if u <= cumsum_prob\n            return val\n        end\n    end\n    return d.values[end]  # fallback due to floating point\nend\n\n# Required: element type\nBase.eltype(::CustomCategorical{T}) where T = T\n\n# Optional: display\nfunction Base.show(io::IO, d::CustomCategorical)\n    print(io, \"CustomCategorical(\", d.values, \", \", d.probabilities, \")\")\nend","category":"page"},{"location":"custom_distributions/","page":"Custom Distribution Types","title":"Custom Distribution Types","text":"You can then use this custom distribution with DecoratedGraphon:","category":"page"},{"location":"custom_distributions/","page":"Custom Distribution Types","title":"Custom Distribution Types","text":"using Graphons\n\n# Create a graphon that returns custom distributions\nfunction W_custom(x, y)\n    if x + y < 1.0\n        return CustomCategorical([1, 2, 3], [0.5, 0.3, 0.2])\n    else\n        return CustomCategorical([2, 3, 4], [0.2, 0.5, 0.3])\n    end\nend\n\ngraphon = DecoratedGraphon(W_custom)\nA = rand(graphon, 50)  # Sample a 50×50 graph","category":"page"},{"location":"custom_distributions/","page":"Custom Distribution Types","title":"Custom Distribution Types","text":"For a complete working example with visualization, see the Custom Distributions tutorial.","category":"page"},{"location":"custom_distributions/#Notes-on-Type-Inference","page":"Custom Distribution Types","title":"Notes on Type Inference","text":"","category":"section"},{"location":"custom_distributions/","page":"Custom Distribution Types","title":"Custom Distribution Types","text":"The DecoratedGraphon constructor will automatically infer the edge type by calling the graphon function at a test point (0.1, 0.2) and checking the element type of the returned distribution. Make sure your custom distribution's eltype method returns the correct type.","category":"page"},{"location":"custom_distributions/","page":"Custom Distribution Types","title":"Custom Distribution Types","text":"For multivariate distributions (distributions that return vectors), wrap the result in StaticArrays.SVector for better performance:","category":"page"},{"location":"custom_distributions/","page":"Custom Distribution Types","title":"Custom Distribution Types","text":"Base.eltype(::MyMultivariateDistribution) = SVector{3, Float64}","category":"page"},{"location":"tutorials/02_block_models/","page":"Stochastic Block Models","title":"Stochastic Block Models","text":"EditURL = \"../../literate/tutorials/02_block_models.jl\"","category":"page"},{"location":"tutorials/02_block_models/#Stochastic-Block-Models","page":"Stochastic Block Models","title":"Stochastic Block Models","text":"","category":"section"},{"location":"tutorials/02_block_models/","page":"Stochastic Block Models","title":"Stochastic Block Models","text":"This tutorial focuses on Stochastic Block Models (SBMs), which are discrete graphons where nodes belong to blocks (communities) and edge probabilities depend only on block membership.","category":"page"},{"location":"tutorials/02_block_models/","page":"Stochastic Block Models","title":"Stochastic Block Models","text":"SBMs are widely used in network analysis because they:","category":"page"},{"location":"tutorials/02_block_models/","page":"Stochastic Block Models","title":"Stochastic Block Models","text":"Capture community structure naturally\nAre computationally efficient\nHave well-understood statistical properties\nCan model various network architectures","category":"page"},{"location":"tutorials/02_block_models/#Setup","page":"Stochastic Block Models","title":"Setup","text":"","category":"section"},{"location":"tutorials/02_block_models/","page":"Stochastic Block Models","title":"Stochastic Block Models","text":"Load the packages we'll need:","category":"page"},{"location":"tutorials/02_block_models/","page":"Stochastic Block Models","title":"Stochastic Block Models","text":"using Graphons\nusing Random\nusing CairoMakie\n\nRandom.seed!(42)","category":"page"},{"location":"tutorials/02_block_models/#Understanding-Stochastic-Block-Models","page":"Stochastic Block Models","title":"Understanding Stochastic Block Models","text":"","category":"section"},{"location":"tutorials/02_block_models/","page":"Stochastic Block Models","title":"Stochastic Block Models","text":"An SBM is defined by two components:","category":"page"},{"location":"tutorials/02_block_models/","page":"Stochastic Block Models","title":"Stochastic Block Models","text":"Block probability matrix θ: A k×k matrix where θ[i,j] is the probability of an edge between a node in block i and a node in block j\nBlock sizes: The proportion of nodes in each block (must sum to 1)","category":"page"},{"location":"tutorials/02_block_models/","page":"Stochastic Block Models","title":"Stochastic Block Models","text":"For example, a 2-block model with equal-sized communities:","category":"page"},{"location":"tutorials/02_block_models/","page":"Stochastic Block Models","title":"Stochastic Block Models","text":"θ = [0.8 0.1; 0.1 0.8]  # High within-block, low between-block\nsizes = [0.5, 0.5]       # 50% in each block","category":"page"},{"location":"tutorials/02_block_models/#Example-1:-Assortative-Community-Structure","page":"Stochastic Block Models","title":"Example 1: Assortative Community Structure","text":"","category":"section"},{"location":"tutorials/02_block_models/","page":"Stochastic Block Models","title":"Stochastic Block Models","text":"Assortative networks have high within-block connectivity and low between-block connectivity. This creates distinct communities or clusters.","category":"page"},{"location":"tutorials/02_block_models/#Two-Communities","page":"Stochastic Block Models","title":"Two Communities","text":"","category":"section"},{"location":"tutorials/02_block_models/","page":"Stochastic Block Models","title":"Stochastic Block Models","text":"Let's create a network with two equal-sized communities:","category":"page"},{"location":"tutorials/02_block_models/","page":"Stochastic Block Models","title":"Stochastic Block Models","text":"θ_assort2 = [0.8 0.1; 0.1 0.8]\nsizes_assort2 = [0.5, 0.5]\n\nsbm_assort2 = SBM(θ_assort2, sizes_assort2)","category":"page"},{"location":"tutorials/02_block_models/","page":"Stochastic Block Models","title":"Stochastic Block Models","text":"Visualize the block structure:","category":"page"},{"location":"tutorials/02_block_models/","page":"Stochastic Block Models","title":"Stochastic Block Models","text":"fig = Figure(size=(800, 350))\nax1 = Axis(fig[1, 1],\n    title=\"Block Probability Matrix\",\n    xlabel=\"Block\",\n    ylabel=\"Block\",\n    aspect=1)\nax2 = Axis(fig[1, 2],\n    title=\"Sampled Graph (n=200)\",\n    aspect=1)\n\nheatmap!(ax1, θ_assort2, colormap=:binary, colorrange=(0, 1))\nhidedecorations!(ax2)\n\nA_assort2 = sample_graph(sbm_assort2, 200)\nheatmap!(ax2, A_assort2, colormap=:binary)\n\nColorbar(fig[1, 3], colormap=:binary, colorrange=(0, 1), label=\"Probability\")\n\nfig","category":"page"},{"location":"tutorials/02_block_models/","page":"Stochastic Block Models","title":"Stochastic Block Models","text":"The two blocks are clearly visible in the sampled graph!","category":"page"},{"location":"tutorials/02_block_models/#Three-Communities","page":"Stochastic Block Models","title":"Three Communities","text":"","category":"section"},{"location":"tutorials/02_block_models/","page":"Stochastic Block Models","title":"Stochastic Block Models","text":"Let's create a more complex structure with three communities of different sizes:","category":"page"},{"location":"tutorials/02_block_models/","page":"Stochastic Block Models","title":"Stochastic Block Models","text":"θ_assort3 = [0.9 0.1 0.05;\n             0.1 0.8 0.1;\n             0.05 0.1 0.85]\nsizes_assort3 = [0.3, 0.4, 0.3]\n\nsbm_assort3 = SBM(θ_assort3, sizes_assort3)\nA_assort3 = sample_graph(sbm_assort3, 200)\n\nfig = Figure(size=(800, 350))\nax1 = Axis(fig[1, 1],\n    title=\"3-Block Probability Matrix\",\n    xlabel=\"Block\",\n    ylabel=\"Block\",\n    aspect=1)\nax2 = Axis(fig[1, 2],\n    title=\"Sampled Graph (n=200)\",\n    aspect=1)\n\nheatmap!(ax1, θ_assort3, colormap=:binary, colorrange=(0, 1))\nhidedecorations!(ax2)\nheatmap!(ax2, A_assort3, colormap=:binary)\n\nColorbar(fig[1, 3], colormap=:binary, colorrange=(0, 1), label=\"Probability\")\n\nfig","category":"page"},{"location":"tutorials/02_block_models/","page":"Stochastic Block Models","title":"Stochastic Block Models","text":"Notice the three distinct blocks with different connection patterns!","category":"page"},{"location":"tutorials/02_block_models/#Example-2:-Disassortative-Core-Periphery-Structure","page":"Stochastic Block Models","title":"Example 2: Disassortative Core-Periphery Structure","text":"","category":"section"},{"location":"tutorials/02_block_models/","page":"Stochastic Block Models","title":"Stochastic Block Models","text":"Core-periphery networks have a densely connected core and a sparse periphery that primarily connects to the core, not to itself.","category":"page"},{"location":"tutorials/02_block_models/","page":"Stochastic Block Models","title":"Stochastic Block Models","text":"θ_cp = [0.8 0.4;    # Core is dense, core-periphery has medium connectivity\n        0.4 0.1]     # Periphery is sparse\nsizes_cp = [0.3, 0.7]  # Small core (30%), large periphery (70%)\n\nsbm_cp = SBM(θ_cp, sizes_cp)\nA_cp = sample_graph(sbm_cp, 200)\n\nfig = Figure(size=(800, 350))\nax1 = Axis(fig[1, 1],\n    title=\"Core-Periphery Structure\",\n    xlabel=\"Block\",\n    ylabel=\"Block\",\n    aspect=1)\nax2 = Axis(fig[1, 2],\n    title=\"Sampled Graph (n=200)\",\n    aspect=1)\n\nheatmap!(ax1, θ_cp, colormap=:binary, colorrange=(0, 1))\nhidedecorations!(ax2)\nheatmap!(ax2, A_cp, colormap=:binary)\n\nColorbar(fig[1, 3], colormap=:binary, colorrange=(0, 1), label=\"Probability\")\n\nfig","category":"page"},{"location":"tutorials/02_block_models/","page":"Stochastic Block Models","title":"Stochastic Block Models","text":"The small, dense core (top-left) is clearly visible, with sparser connections to the periphery.","category":"page"},{"location":"tutorials/02_block_models/#Example-3:-Hierarchical-Structure","page":"Stochastic Block Models","title":"Example 3: Hierarchical Structure","text":"","category":"section"},{"location":"tutorials/02_block_models/","page":"Stochastic Block Models","title":"Stochastic Block Models","text":"We can create hierarchical networks with multiple levels of organization:","category":"page"},{"location":"tutorials/02_block_models/","page":"Stochastic Block Models","title":"Stochastic Block Models","text":"θ_hier = [0.9 0.6 0.2 0.1;\n          0.6 0.9 0.1 0.2;\n          0.2 0.1 0.9 0.5;\n          0.1 0.2 0.5 0.9]\nsizes_hier = [0.25, 0.25, 0.25, 0.25]\n\nsbm_hier = SBM(θ_hier, sizes_hier)\nA_hier = sample_graph(sbm_hier, 200)\n\nfig = Figure(size=(800, 350))\nax1 = Axis(fig[1, 1],\n    title=\"Hierarchical Structure\",\n    xlabel=\"Block\",\n    ylabel=\"Block\",\n    aspect=1)\nax2 = Axis(fig[1, 2],\n    title=\"Sampled Graph (n=200)\",\n    aspect=1)\n\nheatmap!(ax1, θ_hier, colormap=:binary, colorrange=(0, 1))\nhidedecorations!(ax2)\nheatmap!(ax2, A_hier, colormap=:binary)\n\nColorbar(fig[1, 3], colormap=:binary, colorrange=(0, 1), label=\"Probability\")\n\nfig","category":"page"},{"location":"tutorials/02_block_models/","page":"Stochastic Block Models","title":"Stochastic Block Models","text":"This creates a two-level hierarchy: blocks 1-2 form one meta-community, blocks 3-4 form another, with weak connections between them.","category":"page"},{"location":"tutorials/02_block_models/#Example-4:-Erdős-Rényi-as-a-Special-Case","page":"Stochastic Block Models","title":"Example 4: Erdős-Rényi as a Special Case","text":"","category":"section"},{"location":"tutorials/02_block_models/","page":"Stochastic Block Models","title":"Stochastic Block Models","text":"The classic Erdős-Rényi random graph is just an SBM with one block:","category":"page"},{"location":"tutorials/02_block_models/","page":"Stochastic Block Models","title":"Stochastic Block Models","text":"θ_er = fill(0.3, 1, 1)\nsizes_er = [1.0]\n\nsbm_er = SBM(θ_er, sizes_er)\nA_er = sample_graph(sbm_er, 200)\n\nfig = Figure(size=(500, 450))\nax = Axis(fig[1, 1],\n    title=\"Erdős-Rényi G(n,p) with p=0.3\",\n    aspect=1)\nhidedecorations!(ax)\nheatmap!(ax, A_er, colormap=:binary)\nfig","category":"page"},{"location":"tutorials/02_block_models/","page":"Stochastic Block Models","title":"Stochastic Block Models","text":"Uniform random structure with no community organization.","category":"page"},{"location":"tutorials/02_block_models/#Comparing-Different-Structures","page":"Stochastic Block Models","title":"Comparing Different Structures","text":"","category":"section"},{"location":"tutorials/02_block_models/","page":"Stochastic Block Models","title":"Stochastic Block Models","text":"Let's compare all the structures side by side:","category":"page"},{"location":"tutorials/02_block_models/","page":"Stochastic Block Models","title":"Stochastic Block Models","text":"fig = Figure(size=(1400, 350))\nmodels = [\n    (\"2 Communities\", sbm_assort2),\n    (\"Core-Periphery\", sbm_cp),\n    (\"3 Communities\", sbm_assort3),\n    (\"Hierarchical\", sbm_hier)\n]\n\nfor (i, (title, sbm)) in enumerate(models)\n    ax = Axis(fig[1, i], title=title, aspect=1)\n    hidedecorations!(ax)\n    A = sample_graph(sbm, 200)\n    heatmap!(ax, A, colormap=:binary)\nend\n\nfig","category":"page"},{"location":"tutorials/02_block_models/","page":"Stochastic Block Models","title":"Stochastic Block Models","text":"Each structure creates distinct visual patterns in the adjacency matrix!","category":"page"},{"location":"tutorials/02_block_models/#From-Continuous-Graphons-to-Block-Models","page":"Stochastic Block Models","title":"From Continuous Graphons to Block Models","text":"","category":"section"},{"location":"tutorials/02_block_models/","page":"Stochastic Block Models","title":"Stochastic Block Models","text":"We can discretize any continuous graphon into an SBM using empirical_graphon:","category":"page"},{"location":"tutorials/02_block_models/","page":"Stochastic Block Models","title":"Stochastic Block Models","text":"W_smooth(x, y) = x * y\ngraphon_smooth = SimpleContinuousGraphon(W_smooth)\n\nsbm_from_graphon = empirical_graphon(graphon_smooth, 5)  # 5 blocks\n\nfig = Figure(size=(800, 350))\nax1 = Axis(fig[1, 1],\n    title=\"Continuous Graphon W(x,y)=xy\",\n    aspect=1)\nax2 = Axis(fig[1, 2],\n    title=\"5-Block Discretization\",\n    aspect=1)\n\nheatmap!(ax1, graphon_smooth, colormap=:binary, colorrange=(0, 1))\nheatmap!(ax2, sbm_from_graphon, colormap=:binary, colorrange=(0, 1))\n\nColorbar(fig[1, 3], colormap=:binary, colorrange=(0, 1), label=\"Probability\")\n\nfig","category":"page"},{"location":"tutorials/02_block_models/","page":"Stochastic Block Models","title":"Stochastic Block Models","text":"The SBM provides a piecewise-constant approximation of the smooth graphon.","category":"page"},{"location":"tutorials/02_block_models/#Analyzing-Block-Structure","page":"Stochastic Block Models","title":"Analyzing Block Structure","text":"","category":"section"},{"location":"tutorials/02_block_models/","page":"Stochastic Block Models","title":"Stochastic Block Models","text":"We can extract and analyze the block structure:","category":"page"},{"location":"tutorials/02_block_models/","page":"Stochastic Block Models","title":"Stochastic Block Models","text":"println(\"Block probability matrix:\")\nprintln(sbm_assort3.θ)\nprintln(\"\\nBlock sizes:\")\nprintln(sbm_assort3.size)\nprintln(\"\\nCumulative sizes (for latent position mapping):\")\nprintln(sbm_assort3.cumsize)","category":"page"},{"location":"tutorials/02_block_models/","page":"Stochastic Block Models","title":"Stochastic Block Models","text":"When sampling with explicit latents, the latent position determines block membership:","category":"page"},{"location":"tutorials/02_block_models/","page":"Stochastic Block Models","title":"Stochastic Block Models","text":"ξs = range(0, 1, length=200)\nA_ordered = sample_graph(sbm_assort3, ξs)\n\nfig = Figure(size=(500, 450))\nax = Axis(fig[1, 1],\n    title=\"3-Block SBM with Ordered Latents\",\n    aspect=1)\nhidedecorations!(ax)\nheatmap!(ax, A_ordered, colormap=:binary)\nfig","category":"page"},{"location":"tutorials/02_block_models/","page":"Stochastic Block Models","title":"Stochastic Block Models","text":"With ordered latents, the block boundaries are perfectly visible!","category":"page"},{"location":"tutorials/02_block_models/#Key-Takeaways","page":"Stochastic Block Models","title":"Key Takeaways","text":"","category":"section"},{"location":"tutorials/02_block_models/","page":"Stochastic Block Models","title":"Stochastic Block Models","text":"Stochastic Block Models discretize the graphon into k blocks\nAssortative SBMs create community structure (high within-block, low between-block)\nDisassortative SBMs create core-periphery or other mixing patterns\nBlock sizes can be unequal to model realistic heterogeneity\nAny continuous graphon can be discretized with empirical_graphon(graphon, k)\nSBMs are computationally efficient for large networks","category":"page"},{"location":"tutorials/02_block_models/#Next-Steps","page":"Stochastic Block Models","title":"Next Steps","text":"","category":"section"},{"location":"tutorials/02_block_models/","page":"Stochastic Block Models","title":"Stochastic Block Models","text":"For multiplex networks and rich edge attributes, see the Decorated Graphons tutorial\nFor smooth, continuous structures, use SimpleContinuousGraphon\nFor model selection, consider using statistical inference on real network data","category":"page"},{"location":"tutorials/02_block_models/","page":"Stochastic Block Models","title":"Stochastic Block Models","text":"","category":"page"},{"location":"tutorials/02_block_models/","page":"Stochastic Block Models","title":"Stochastic Block Models","text":"This page was generated using Literate.jl.","category":"page"},{"location":"graphs_type/#Graph-Types","page":"Graph representation","title":"Graph Types","text":"","category":"section"},{"location":"graphs_type/","page":"Graph representation","title":"Graph representation","text":"When creating Graphon objects, we can specify the type of graph to be sampled. By default, the sampled graphs are dense matrices. However, we can specify SparseMatrixCSC to obtain sparse graphs (should be supported by default), but other types are also possible.","category":"page"},{"location":"graphs_type/","page":"Graph representation","title":"Graph representation","text":"info: Work in Progress\nThis section is a work in progress. More graph types will be added in the future.","category":"page"},{"location":"graphs_type/#Design-Philosophy","page":"Graph representation","title":"Design Philosophy","text":"","category":"section"},{"location":"graphs_type/","page":"Graph representation","title":"Graph representation","text":"One of the main difficulties is that we cannot know what value is used to represent a non-edge in a decorated graph type. For example, for a simple graph encoded in a BitMatrix, a non-edge is represented by false. But for a weighted graph encoded in a Matrix{Float64}, there is no necessarily a default value for a non-edge. It could be 0.0, NaN, or any other value.","category":"page"},{"location":"graphs_type/","page":"Graph representation","title":"Graph representation","text":"To circumvent this issue, we have decided to let the user define how to create an empty graph of a given type if the default is not suitable. This means that the function to randomly sample a graph with preallocated memory now expects that the input graph is empty and of the right size.","category":"page"},{"location":"graphs_type/","page":"Graph representation","title":"Graph representation","text":"Graphons._rand!","category":"page"},{"location":"graphs_type/#Graphons._rand!","page":"Graph representation","title":"Graphons._rand!","text":"_rand!(rng::AbstractRNG, f::AbstractGraphon{T,M}, A::M, ξs)\n\nGenerates a random graph according to the graphon `f` and the latent positions `ξs`.\nThe generated graph is stored in `A`.\n\nwarning: Warning\nThis function expects that A is an empty graph of the right size and type. It does not try to clean it up before filling it. See make_empty_graph for more details.\n\n\n\n\n\n","category":"function"},{"location":"graphs_type/#Custom-Graph-Types","page":"Graph representation","title":"Custom Graph Types","text":"","category":"section"},{"location":"graphs_type/","page":"Graph representation","title":"Graph representation","text":"To sample with your own graph type, you need to redefine the function make_empty_graph(::Type{M}, n), such that it returns an empty graph of type M with n nodes and no edges.","category":"page"},{"location":"graphs_type/","page":"Graph representation","title":"Graph representation","text":"info: Design Choice\nSince for decorated graphs it is sometimes hard to know in advance what will be the default representation of a non-edge, we have left that choice to the user via the make_empty_graph function.","category":"page"},{"location":"graphs_type/","page":"Graph representation","title":"Graph representation","text":"An example of a custom graph type is provided in ext/SuiteSparseGraphBLAS.jl, which uses the SuiteSparseGraphBLAS package to create large sparse graphs efficiently.","category":"page"},{"location":"graphs_type/","page":"Graph representation","title":"Graph representation","text":"function make_empty_graph(::Type{GB}, n) where {GB<:GBMatrix}\n    return GB(n, n)\nend","category":"page"},{"location":"graphs_type/","page":"Graph representation","title":"Graph representation","text":"This allows us to create a Graphon object that will sample graphs of type GBMatrix:","category":"page"},{"location":"graphs_type/","page":"Graph representation","title":"Graph representation","text":"using SuiteSparseGraphBLAS\nf_sparseBLAS = SimpleContinuousGraphon((x,y)-> 0.1, GBMatrix{Bool})\nA = rand(f_sparseBLAS, 41)","category":"page"},{"location":"graphs_type/#Custom-Distribution-Types","page":"Graph representation","title":"Custom Distribution Types","text":"","category":"section"},{"location":"graphs_type/","page":"Graph representation","title":"Graph representation","text":"For information on implementing custom distribution types to use with DecoratedGraphon, see the Custom Distribution Types page.","category":"page"},{"location":"api/#API-Reference","page":"API Reference","title":"API Reference","text":"","category":"section"},{"location":"api/#Graphon-Types","page":"API Reference","title":"Graphon Types","text":"","category":"section"},{"location":"api/","page":"API Reference","title":"API Reference","text":"Graphons.AbstractGraphon\nGraphons.SimpleGraphon\nGraphons.WeightedGraphon\nSimpleContinuousGraphon\nSBM\nDecoratedGraphon\nDecoratedSBM","category":"page"},{"location":"api/#Graphons.AbstractGraphon","page":"API Reference","title":"Graphons.AbstractGraphon","text":"AbstractGraphon{T,M}\n\nAbstract base type for all graphon models.\n\nType Parameters\n\nT: The edge type (e.g., Bool for simple graphs, Float64 for weighted graphs, SizedVector{2,Bool} for multiplex networks)\nM: The matrix type for sampled graphs (e.g., BitMatrix, Matrix{T}, SparseMatrixCSC{T,Int}, GBMatrix{T})\n\nEdge Types\n\nBool: Simple (unweighted) graphs\n<:Real: Weighted graphs with numeric edge weights\n<:AbstractVector{Bool}: Multiplex networks with multiple edge types\n\nMatrix Types\n\nBitMatrix or Matrix{Bool}: Dense representation for simple graphs\nMatrix{T}: Dense representation for weighted/decorated graphs\nSparseMatrixCSC{T,Int}: Sparse representation for low-density graphs\nGBMatrix{T}: GraphBLAS representation (requires SuiteSparseGraphBLAS extension)\n\nAll graphon types must:\n\nBe callable: graphon(x, y) returns probability or distribution at positions x, y ∈ [0,1]\nSupport make_empty_graph(M, n) for creating empty adjacency matrices\nImplement sampling through _rand! method\n\nSubtypes\n\nSimpleContinuousGraphon: Continuous function-based graphons\nSBM: Stochastic block models\nDecoratedGraphon: Graphons with distribution-valued edges\nDecoratedSBM: Block models with distribution-valued edges\n\nSee Also\n\nrand, sample_graph: Sampling functions\n\n\n\n\n\n","category":"type"},{"location":"api/#Graphons.SimpleGraphon","page":"API Reference","title":"Graphons.SimpleGraphon","text":"SimpleGraphon{M}\n\nType alias for graphons representing simple (unweighted) graphs with Boolean edges.\n\nEquivalent to AbstractGraphon{Bool,M} where M is a matrix type storing Boolean values.\n\n\n\n\n\n","category":"type"},{"location":"api/#Graphons.WeightedGraphon","page":"API Reference","title":"Graphons.WeightedGraphon","text":"WeightedGraphon{M}\n\nType alias for graphons representing weighted graphs with Float64 edges.\n\nEquivalent to AbstractGraphon{Float64,M} where M is a matrix type storing Float64 values.\n\n\n\n\n\n","category":"type"},{"location":"api/#Graphons.SimpleContinuousGraphon","page":"API Reference","title":"Graphons.SimpleContinuousGraphon","text":"SimpleContinuousGraphon{M,F} <: SimpleGraphon{M}\n\nA continuous graphon represented by a function f(x, y) that returns the probability of an edge between nodes at latent positions x and y in [0,1].\n\nType Parameters\n\nM: The matrix type used to represent sampled graphs (e.g., BitMatrix, SparseMatrixCSC{Bool,Int})\nF: The type of the graphon function\n\nFields\n\nf::F: A callable function f(x, y) -> Float64 where x, y ∈ [0,1] and the return value is in [0,1]\n\nConstructors\n\nSimpleContinuousGraphon(f, M=BitMatrix)\n\nCreate a continuous graphon from function f with matrix type M.\n\nExamples\n\n# Constant probability graphon\ng = SimpleContinuousGraphon((x, y) -> 0.5)\n\n# Distance-based graphon\ng = SimpleContinuousGraphon((x, y) -> exp(-abs(x - y)))\n\n# Sparse matrix representation\ng = SimpleContinuousGraphon((x, y) -> 0.1, SparseMatrixCSC{Bool,Int})\n\nSee Also\n\nSBM: Discrete stochastic block model\nempirical_graphon: Discretize a continuous graphon\n\n\n\n\n\n","category":"type"},{"location":"api/#Graphons.SBM","page":"API Reference","title":"Graphons.SBM","text":"SBM{P,S,S2} <: AbstractGraphon{Bool,BitMatrix}\n\nA Stochastic Block Model (SBM) is a discrete graphon with K blocks where edge probabilities depend only on the block membership of nodes.\n\nFields\n\nθ::P: K×K matrix of edge probabilities between blocks, where θ[i,j] is the probability of an edge between block i and j\nsize::S: Vector of block sizes (must sum to 1), representing the proportion of nodes in each block\ncumsize::S2: Cumulative sum of block sizes for efficient block assignment\n\nConstructor\n\nSBM(θ, sizes)\n\nCreate a stochastic block model with edge probability matrix θ and block sizes sizes.\n\nArguments\n\nθ: K×K matrix where each entry is in [0,1]\nsizes: Vector of K positive values that sum to 1\n\nExamples\n\n# Two-block assortative model\nθ = [0.8 0.1; 0.1 0.8]\nsizes = [0.5, 0.5]\nsbm = SBM(θ, sizes)\n\n# Three-block model with unequal sizes\nθ = [0.9 0.1 0.2; 0.1 0.8 0.1; 0.2 0.1 0.7]\nsizes = [0.3, 0.5, 0.2]\nsbm = SBM(θ, sizes)\n\nSee Also\n\nSimpleContinuousGraphon: Continuous graphon representation\nempirical_graphon: Convert continuous graphon to SBM\n\n\n\n\n\n","category":"type"},{"location":"api/#Graphons.DecoratedGraphon","page":"API Reference","title":"Graphons.DecoratedGraphon","text":"DecoratedGraphon{T,M,F,D} <: AbstractGraphon{T,M}\n\nA decorated graphon where edges have rich attributes drawn from distributions. Instead of returning edge probabilities, the graphon function returns a distribution from which edge values are sampled.\n\nType Parameters\n\nT: The type of edge values (inferred from the distribution)\nM: The matrix type for sampled graphs\nF: The type of the graphon function\nD: The type of distributions returned by the function\n\nFields\n\nf::F: A callable function f(x, y) -> Distribution where x, y ∈ [0,1]\n\nConstructors\n\nDecoratedGraphon(f)\nDecoratedGraphon(f, M)\n\nCreate a decorated graphon from function f. The edge type is automatically inferred by evaluating f(0.1, 0.2).\n\nExamples\n\nusing Distributions\n\n# Edges are normal random variables\ng = DecoratedGraphon((x, y) -> Normal(x + y, 0.1))\n\n# Edges are Poisson counts\ng = DecoratedGraphon((x, y) -> Poisson(10 * x * y))\n\n# With custom matrix type\ng = DecoratedGraphon((x, y) -> Normal(0, 1), Matrix{Float64})\n\nSee Also\n\nDecoratedSBM: Block model with distributions\nSimpleContinuousGraphon: Simple graphon with probabilities\n\n\n\n\n\n","category":"type"},{"location":"api/#Graphons.DecoratedSBM","page":"API Reference","title":"Graphons.DecoratedSBM","text":"DecoratedSBM{D,M,P,S,S2} <: AbstractGraphon{eltype(M),M}\n\nA Stochastic Block Model where edges have rich attributes drawn from distributions. Each block pair (i,j) has an associated distribution from which edge values are sampled.\n\nFields\n\nθ::P: K×K matrix of distributions, where θ[i,j] is the distribution for edges between block i and j\nsize::S: Vector of block sizes (must sum to 1)\ncumsize::S2: Cumulative sum of block sizes\n\nConstructor\n\nDecoratedSBM(θ, sizes, M=Matrix{...})\n\nCreate a decorated SBM with distribution matrix θ and block sizes sizes.\n\nArguments\n\nθ: K×K matrix of Distribution objects\nsizes: Vector of K positive values that sum to 1\nM: (Optional) Matrix type for sampled graphs\n\nExamples\n\nusing Distributions\n\n# Two-block model with Normal edges\nθ = [Normal(1.0, 0.1) Normal(0.0, 0.1);\n     Normal(0.0, 0.1) Normal(1.0, 0.1)]\nsizes = [0.5, 0.5]\ndsbm = DecoratedSBM(θ, sizes)\n\n# Poisson-weighted edges\nθ = [Poisson(10) Poisson(2); Poisson(2) Poisson(10)]\ndsbm = DecoratedSBM(θ, sizes)\n\nSee Also\n\nDecoratedGraphon: Continuous decorated graphon\nSBM: Simple block model with probabilities\n\n\n\n\n\n","category":"type"},{"location":"api/#Sampling-Functions","page":"API Reference","title":"Sampling Functions","text":"","category":"section"},{"location":"api/","page":"API Reference","title":"API Reference","text":"Graphons.rand(::Random.AbstractRNG, ::Graphons.AbstractGraphon, ::Int)\nsample_graph","category":"page"},{"location":"api/#Base.rand-Tuple{AbstractRNG, Graphons.AbstractGraphon, Int64}","page":"API Reference","title":"Base.rand","text":"rand([rng::AbstractRNG], graphon::AbstractGraphon{T,M}, n::Int) -> M\n\nGenerate a random graph from a graphon with n nodes.\n\nLatent positions for each node are drawn uniformly at random from [0,1], and edges are sampled according to the graphon. For simple graphons, edges are present with probability f(ξᵢ, ξⱼ). For decorated graphons, edge weights are sampled from the distribution f(ξᵢ, ξⱼ).\n\nArguments\n\nrng: Random number generator (optional, defaults to Random.default_rng())\ngraphon: A graphon model (e.g., SimpleContinuousGraphon, SBM, DecoratedGraphon)\nn: Number of nodes in the graph\n\nReturns\n\nAn adjacency matrix of type M (determined by the graphon) with:\n\nSymmetric structure: A[i,j] == A[j,i]\nNo self-loops: A[i,i] == 0 for all i\nEdge type T (Bool for simple graphs, Float64 for weighted, etc.)\n\nExamples\n\n# Simple random graph\ng = SimpleContinuousGraphon((x, y) -> 0.3)\nA = rand(g, 100)  # 100-node graph with 30% edge probability\n\n# Reproducible sampling\nusing Random\nrng = MersenneTwister(42)\nA = rand(rng, g, 100)\n\n# Stochastic block model\nsbm = SBM([0.8 0.1; 0.1 0.8], [0.5, 0.5])\nA = rand(sbm, 200)\n\n# Decorated graphon with weighted edges\nusing Distributions\ndg = DecoratedGraphon((x, y) -> Normal(x + y, 0.1))\nW = rand(dg, 50)  # Returns Matrix{Float64}\n\nSee Also\n\nsample_graph: Sample with fixed latent positions\nSimpleContinuousGraphon, SBM, DecoratedGraphon\n\n\n\n\n\n","category":"method"},{"location":"api/#Graphons.sample_graph","page":"API Reference","title":"Graphons.sample_graph","text":"sample_graph([rng::AbstractRNG], graphon::AbstractGraphon, n::Int) -> M\nsample_graph([rng::AbstractRNG], graphon::AbstractGraphon, ξs::AbstractVector) -> M\n\nGenerate a graph from a graphon with deterministic or specified latent positions.\n\nThis function provides more control than rand by allowing you to:\n\nUse evenly-spaced latent positions ξ = [0, 1/(n-1), 2/(n-1), ..., 1]\nSpecify custom latent positions for each node\n\nGraphs sampled with the same latent positions will have the same expected structure, making this useful for reproducibility and controlled experiments.\n\nArguments\n\nrng: Random number generator (optional)\ngraphon: A graphon model\nn: Number of nodes (latents will be evenly spaced on [0,1])\nξs: Vector of latent positions in [0,1], one per node\n\nReturns\n\nAn adjacency matrix of type M with symmetric structure and no self-loops.\n\nExamples\n\n# Evenly-spaced latents\ng = SimpleContinuousGraphon((x, y) -> x * y)\nA = sample_graph(g, 10)  # Uses ξ = [0, 0.111..., 0.222..., ..., 1]\n\n# Custom latent positions\nξs = [0.1, 0.2, 0.5, 0.9]\nA = sample_graph(g, ξs)\n\n# Reproducible with same latents\nusing Random\nrng = MersenneTwister(42)\nA1 = sample_graph(rng, g, ξs)\nrng = MersenneTwister(42)\nA2 = sample_graph(rng, g, ξs)\n# A1 and A2 will be identical\n\n# Compare random vs deterministic latents\nA_random = rand(g, 100)        # Random latents\nA_fixed = sample_graph(g, 100) # Evenly-spaced latents\n\nSee Also\n\nrand: Sample with random latent positions\nSimpleContinuousGraphon, SBM, DecoratedGraphon\n\n\n\n\n\n","category":"function"},{"location":"api/#Utility-Functions","page":"API Reference","title":"Utility Functions","text":"","category":"section"},{"location":"api/","page":"API Reference","title":"API Reference","text":"empirical_graphon","category":"page"},{"location":"api/#Graphons.empirical_graphon","page":"API Reference","title":"Graphons.empirical_graphon","text":"empirical_graphon(f::SimpleContinuousGraphon, k::Int) -> SBM\n\nDiscretize a continuous graphon into a Stochastic Block Model with k blocks by evaluating the graphon at a uniform grid of points.\n\nArguments\n\nf: A continuous graphon\nk: Number of blocks for discretization\n\nReturns\n\nAn SBM with k blocks approximating the continuous graphon.\n\nExamples\n\n# Create continuous graphon\nf = SimpleContinuousGraphon((x, y) -> min(x, y))\n\n# Discretize into 10-block SBM\nsbm = empirical_graphon(f, 10)\n\nSee Also\n\nSimpleContinuousGraphon: Continuous graphon type\nSBM: Stochastic block model type\n\n\n\n\n\nempirical_graphon(f::DecoratedGraphon, k::Int) -> DecoratedSBM\n\nDiscretize a continuous decorated graphon into a block model with k blocks by evaluating the graphon at a uniform grid of points.\n\nArguments\n\nf: A decorated graphon\nk: Number of blocks for discretization\n\nReturns\n\nA DecoratedSBM with k blocks approximating the continuous graphon.\n\nExamples\n\nusing Distributions\n\n# Create continuous decorated graphon\nf = DecoratedGraphon((x, y) -> Normal(x * y, 0.1))\n\n# Discretize into 10-block model\ndsbm = empirical_graphon(f, 10)\n\nSee Also\n\nDecoratedGraphon: Continuous decorated graphon\nDecoratedSBM: Block model with distributions\n\n\n\n\n\n","category":"function"},{"location":"api/#Index","page":"API Reference","title":"Index","text":"","category":"section"},{"location":"api/","page":"API Reference","title":"API Reference","text":"","category":"page"},{"location":"tutorials/03_multiplex_networks/","page":"Multiplex Networks with Decorated Graphons","title":"Multiplex Networks with Decorated Graphons","text":"EditURL = \"../../literate/tutorials/03_multiplex_networks.jl\"","category":"page"},{"location":"tutorials/03_multiplex_networks/#Multiplex-Networks-with-Decorated-Graphons","page":"Multiplex Networks with Decorated Graphons","title":"Multiplex Networks with Decorated Graphons","text":"","category":"section"},{"location":"tutorials/03_multiplex_networks/","page":"Multiplex Networks with Decorated Graphons","title":"Multiplex Networks with Decorated Graphons","text":"In this tutorial, we'll learn how to model multiplex networks (graphs with multiple types of edges or layers) using decorated graphons. This is a powerful extension that goes beyond simple binary graphs.","category":"page"},{"location":"tutorials/03_multiplex_networks/","page":"Multiplex Networks with Decorated Graphons","title":"Multiplex Networks with Decorated Graphons","text":"We'll build a 2-layer network where:","category":"page"},{"location":"tutorials/03_multiplex_networks/","page":"Multiplex Networks with Decorated Graphons","title":"Multiplex Networks with Decorated Graphons","text":"Each edge can exist on layer 1, layer 2, both layers, or neither\nThe probabilities depend on the latent positions of nodes\nWe can analyze correlations between layers","category":"page"},{"location":"tutorials/03_multiplex_networks/#Motivation:-Why-Decorated-Graphons?","page":"Multiplex Networks with Decorated Graphons","title":"Motivation: Why Decorated Graphons?","text":"","category":"section"},{"location":"tutorials/03_multiplex_networks/","page":"Multiplex Networks with Decorated Graphons","title":"Multiplex Networks with Decorated Graphons","text":"Real-world networks often have multiple types of relationships:","category":"page"},{"location":"tutorials/03_multiplex_networks/","page":"Multiplex Networks with Decorated Graphons","title":"Multiplex Networks with Decorated Graphons","text":"Social networks: friendships, professional connections, family ties\nBrain networks: anatomical connections, functional correlations\nTransportation: roads, railways, air routes","category":"page"},{"location":"tutorials/03_multiplex_networks/","page":"Multiplex Networks with Decorated Graphons","title":"Multiplex Networks with Decorated Graphons","text":"A decorated graphon returns not just edge probabilities, but entire distributions over edge types or weights. This lets us model rich, structured networks.","category":"page"},{"location":"tutorials/03_multiplex_networks/#Setup","page":"Multiplex Networks with Decorated Graphons","title":"Setup","text":"","category":"section"},{"location":"tutorials/03_multiplex_networks/","page":"Multiplex Networks with Decorated Graphons","title":"Multiplex Networks with Decorated Graphons","text":"Load the packages we'll need:","category":"page"},{"location":"tutorials/03_multiplex_networks/","page":"Multiplex Networks with Decorated Graphons","title":"Multiplex Networks with Decorated Graphons","text":"using Random\nusing Distributions\nusing StaticArrays\nusing Graphons\nusing CairoMakie\n\nRandom.seed!(42)","category":"page"},{"location":"tutorials/03_multiplex_networks/#Understanding-the-Four-Category-Model","page":"Multiplex Networks with Decorated Graphons","title":"Understanding the Four-Category Model","text":"","category":"section"},{"location":"tutorials/03_multiplex_networks/","page":"Multiplex Networks with Decorated Graphons","title":"Multiplex Networks with Decorated Graphons","text":"For a 2-layer multiplex network, each pair of nodes (i,j) can be in one of four categories:","category":"page"},{"location":"tutorials/03_multiplex_networks/","page":"Multiplex Networks with Decorated Graphons","title":"Multiplex Networks with Decorated Graphons","text":"Category Binary Layer 1 Layer 2 Interpretation\n0 00 No No No connection\n1 10 Yes No Only layer 1\n2 01 No Yes Only layer 2\n3 11 Yes Yes Both layers","category":"page"},{"location":"tutorials/03_multiplex_networks/","page":"Multiplex Networks with Decorated Graphons","title":"Multiplex Networks with Decorated Graphons","text":"Instead of returning a single edge probability, our graphon will return a discrete probability distribution over these 4 categories.","category":"page"},{"location":"tutorials/03_multiplex_networks/#Defining-a-Decorated-Graphon","page":"Multiplex Networks with Decorated Graphons","title":"Defining a Decorated Graphon","text":"","category":"section"},{"location":"tutorials/03_multiplex_networks/","page":"Multiplex Networks with Decorated Graphons","title":"Multiplex Networks with Decorated Graphons","text":"Let's create a graphon function that returns interesting structure. The function will assign probabilities to each of the four categories:","category":"page"},{"location":"tutorials/03_multiplex_networks/","page":"Multiplex Networks with Decorated Graphons","title":"Multiplex Networks with Decorated Graphons","text":"Category 1 (layer 1 only): Probability increases with distance between x and y\nCategory 2 (layer 2 only): Periodic pattern based on position synchronization\nCategory 3 (both layers): Probability increases when both x and y are similar and high\nCategory 0 (no edge): Whatever probability remains","category":"page"},{"location":"tutorials/03_multiplex_networks/","page":"Multiplex Networks with Decorated Graphons","title":"Multiplex Networks with Decorated Graphons","text":"Here's the implementation:","category":"page"},{"location":"tutorials/03_multiplex_networks/","page":"Multiplex Networks with Decorated Graphons","title":"Multiplex Networks with Decorated Graphons","text":"function W_multiplex(x, y)\n    ps = zeros(4)\n    ps[2] = sqrt(abs(x - y)) / 2           # layer 1 only\n    ps[3] = abs(sin(2π * x) * sin(2π * y)) / 2  # layer 2 only\n    ps[4] = min(x, y) / 4                   # both layers\n    ps[1] = 1 - sum(ps[2:4])                # no edge\n    return DiscreteNonParametric(0:3, SVector{4}(ps))\nend","category":"page"},{"location":"tutorials/03_multiplex_networks/","page":"Multiplex Networks with Decorated Graphons","title":"Multiplex Networks with Decorated Graphons","text":"Create the decorated graphon:","category":"page"},{"location":"tutorials/03_multiplex_networks/","page":"Multiplex Networks with Decorated Graphons","title":"Multiplex Networks with Decorated Graphons","text":"graphon_multiplex = DecoratedGraphon(W_multiplex)","category":"page"},{"location":"tutorials/03_multiplex_networks/","page":"Multiplex Networks with Decorated Graphons","title":"Multiplex Networks with Decorated Graphons","text":"Let's check what it returns:","category":"page"},{"location":"tutorials/03_multiplex_networks/","page":"Multiplex Networks with Decorated Graphons","title":"Multiplex Networks with Decorated Graphons","text":"@show dist = graphon_multiplex(0.3, 0.7)\n@show probs(dist)  # Probabilities for categories 0, 1, 2, 3\nnothing # hide","category":"page"},{"location":"tutorials/03_multiplex_networks/#Visualizing-Category-Probabilities","page":"Multiplex Networks with Decorated Graphons","title":"Visualizing Category Probabilities","text":"","category":"section"},{"location":"tutorials/03_multiplex_networks/","page":"Multiplex Networks with Decorated Graphons","title":"Multiplex Networks with Decorated Graphons","text":"Let's visualize how the probability of each category varies across the latent space [0,1]²:","category":"page"},{"location":"tutorials/03_multiplex_networks/","page":"Multiplex Networks with Decorated Graphons","title":"Multiplex Networks with Decorated Graphons","text":"fig = Figure(size=(800, 700))\n\nlabels = [\n    \"Category 0\\n(No edges)\",\n    \"Category 1\\n(Layer 1 only)\",\n    \"Category 2\\n(Layer 2 only)\",\n    \"Category 3\\n(Both layers)\"\n]\n\nfor i in 1:4\n    row = (i - 1) ÷ 2 + 1\n    col = (i - 1) % 2 + 1\n\n    ax = Axis(fig[row, col],\n        title=labels[i],\n        xlabel=\"Position x\",\n        ylabel=\"Position y\",\n        aspect=1)\n\n    hm = heatmap!(ax, graphon_multiplex, i,\n        colormap=:binary,\n        colorrange=(0, 1))\nend\n\nColorbar(fig[:, 3], colormap=:binary, colorrange=(0, 1),\n    label=\"Probability\")\n\nfig","category":"page"},{"location":"tutorials/03_multiplex_networks/","page":"Multiplex Networks with Decorated Graphons","title":"Multiplex Networks with Decorated Graphons","text":"Interpretation:","category":"page"},{"location":"tutorials/03_multiplex_networks/","page":"Multiplex Networks with Decorated Graphons","title":"Multiplex Networks with Decorated Graphons","text":"Top-left: Most pairs have no edges (high p₀₀)\nTop-right: Layer 1 edges increase with distance (p₁₀)\nBottom-left: Layer 2 has periodic structure (p₀₁)\nBottom-right: Both layers appear for similar, high-position nodes (p₁₁)","category":"page"},{"location":"tutorials/03_multiplex_networks/#Sampling-a-Multiplex-Network","page":"Multiplex Networks with Decorated Graphons","title":"Sampling a Multiplex Network","text":"","category":"section"},{"location":"tutorials/03_multiplex_networks/","page":"Multiplex Networks with Decorated Graphons","title":"Multiplex Networks with Decorated Graphons","text":"Now let's sample an actual network with 300 nodes:","category":"page"},{"location":"tutorials/03_multiplex_networks/","page":"Multiplex Networks with Decorated Graphons","title":"Multiplex Networks with Decorated Graphons","text":"n = 300\nA_categories = sample_graph(graphon_multiplex, n)\n\nprintln(\"Matrix type: \", typeof(A_categories))\nprintln(\"Matrix size: \", size(A_categories))\nprintln(\"Categories present: \", unique(A_categories))","category":"page"},{"location":"tutorials/03_multiplex_networks/","page":"Multiplex Networks with Decorated Graphons","title":"Multiplex Networks with Decorated Graphons","text":"The matrix contains category labels (0, 1, 2, 3) for each edge pair.","category":"page"},{"location":"tutorials/03_multiplex_networks/#Visualizing-the-Category-Structure","page":"Multiplex Networks with Decorated Graphons","title":"Visualizing the Category Structure","text":"","category":"section"},{"location":"tutorials/03_multiplex_networks/","page":"Multiplex Networks with Decorated Graphons","title":"Multiplex Networks with Decorated Graphons","text":"Let's see how the categories are distributed in the sampled network:","category":"page"},{"location":"tutorials/03_multiplex_networks/","page":"Multiplex Networks with Decorated Graphons","title":"Multiplex Networks with Decorated Graphons","text":"fig = Figure(size=(900, 800))\n\nfor (idx, (cat, label)) in enumerate(zip(0:3, labels))\n    row = (idx - 1) ÷ 2 + 1\n    col = (idx - 1) % 2 + 1\n\n    ax = Axis(fig[row, col],\n        title=label * \" (n=$(count(==(cat), A_categories)))\",\n        aspect=1)\n    hidedecorations!(ax)\n\n    A_binary = zeros(Bool, n, n)\n    A_binary[A_categories.==cat] .= true\n\n    heatmap!(ax, A_binary, colormap=:binary)\nend\n\nfig","category":"page"},{"location":"tutorials/03_multiplex_networks/","page":"Multiplex Networks with Decorated Graphons","title":"Multiplex Networks with Decorated Graphons","text":"Notice how each category creates a different pattern!","category":"page"},{"location":"tutorials/03_multiplex_networks/#Extracting-Individual-Layers","page":"Multiplex Networks with Decorated Graphons","title":"Extracting Individual Layers","text":"","category":"section"},{"location":"tutorials/03_multiplex_networks/","page":"Multiplex Networks with Decorated Graphons","title":"Multiplex Networks with Decorated Graphons","text":"For analysis, we often want separate adjacency matrices for each layer:","category":"page"},{"location":"tutorials/03_multiplex_networks/","page":"Multiplex Networks with Decorated Graphons","title":"Multiplex Networks with Decorated Graphons","text":"A_layer1 = zeros(Bool, n, n)\nA_layer1[A_categories.∈Ref([1, 3])] .= true # Layer 1: present in categories 1 and 3\n\n\nA_layer2 = zeros(Bool, n, n)\nA_layer2[A_categories.∈Ref([2, 3])] .= true # Layer 2: present in categories 2 and 3\n\n\nprintln(\"Layer 1 density: \", sum(A_layer1) / (n^2) * 100, \"%\")\nprintln(\"Layer 2 density: \", sum(A_layer2) / (n^2) * 100, \"%\")\nprintln(\"Overlap (both layers): \", sum(A_layer1 .& A_layer2) / (n^2) * 100, \"%\")","category":"page"},{"location":"tutorials/03_multiplex_networks/","page":"Multiplex Networks with Decorated Graphons","title":"Multiplex Networks with Decorated Graphons","text":"Visualize the two layers:","category":"page"},{"location":"tutorials/03_multiplex_networks/","page":"Multiplex Networks with Decorated Graphons","title":"Multiplex Networks with Decorated Graphons","text":"fig = Figure(size=(900, 400))\n\nax1 = Axis(fig[1, 1],\n    title=\"Layer 1 (Distance-based)\",\n    aspect=1)\nax2 = Axis(fig[1, 2],\n    title=\"Layer 2 (Periodic)\",\n    aspect=1)\n\nhidedecorations!(ax1)\nhidedecorations!(ax2)\n\nheatmap!(ax1, A_layer1, colormap=:binary)\nheatmap!(ax2, A_layer2, colormap=:binary)\n\nfig","category":"page"},{"location":"tutorials/03_multiplex_networks/#Advanced:-Analyzing-Marginals-and-Correlations","page":"Multiplex Networks with Decorated Graphons","title":"Advanced: Analyzing Marginals and Correlations","text":"","category":"section"},{"location":"tutorials/03_multiplex_networks/","page":"Multiplex Networks with Decorated Graphons","title":"Multiplex Networks with Decorated Graphons","text":"We can go beyond categories and think about the marginal probabilities for each layer and their correlation.","category":"page"},{"location":"tutorials/03_multiplex_networks/","page":"Multiplex Networks with Decorated Graphons","title":"Multiplex Networks with Decorated Graphons","text":"For this, we'll use the MVBernoulli package to convert category probabilities into a multivariate Bernoulli distribution. The category probabilities [p00, p10, p01, p11] map to a joint probability table for two binary variables:","category":"page"},{"location":"tutorials/03_multiplex_networks/","page":"Multiplex Networks with Decorated Graphons","title":"Multiplex Networks with Decorated Graphons","text":"using MVBernoulli\n\nfunction W_mvbernoulli(x, y)\n    cat_probs = probs(W_multiplex(x, y))\n    return MVBernoulli.from_tabulation([cat_probs...])\nend\n\ngraphon_mvb = DecoratedGraphon(W_mvbernoulli)","category":"page"},{"location":"tutorials/03_multiplex_networks/","page":"Multiplex Networks with Decorated Graphons","title":"Multiplex Networks with Decorated Graphons","text":"Now we can compute marginal probabilities and correlation:","category":"page"},{"location":"tutorials/03_multiplex_networks/","page":"Multiplex Networks with Decorated Graphons","title":"Multiplex Networks with Decorated Graphons","text":"# Create a grid to evaluate the graphon\ngrid_size = 101\nx_range = range(0, 1, length=grid_size)\n\n# Marginal probability that layer 1 has an edge\np1 = [marginals(graphon_mvb(x, y))[1] for x in x_range, y in x_range]\n\n# Marginal probability that layer 2 has an edge\np2 = [marginals(graphon_mvb(x, y))[2] for x in x_range, y in x_range]\n\n# Correlation between layers\ncorr = [correlation_matrix(graphon_mvb(x, y))[1, 2] for x in x_range, y in x_range]\n\n# Visualize:\n\nfig = Figure(size=(900, 350))\n\nax1 = Axis(fig[1, 1],\n    title=\"P(Layer 1 edge)\",\n    aspect=1)\nax2 = Axis(fig[1, 2],\n    title=\"P(Layer 2 edge)\",\n    aspect=1)\nax3 = Axis(fig[1, 3],\n    title=\"Correlation\",\n    aspect=1)\nhidedecorations!.([ax1, ax2, ax3])\nhm1 = heatmap!(ax1, p1, colormap=:binary, colorrange=(0, 1))\nhm2 = heatmap!(ax2, p2, colormap=:binary, colorrange=(0, 1))\nhm3 = heatmap!(ax3, corr, colormap=:RdBu, colorrange=(-1, 1))\n\nColorbar(fig[2, 1:2], hm1, vertical=false,\n    label=\"Probability\", width=Relative(0.6), flipaxis=false)\nColorbar(fig[2, 3], hm3, vertical=false,\n    label=\"Correlation\", width=Relative(0.9), flipaxis=false)\n\nfig","category":"page"},{"location":"tutorials/03_multiplex_networks/","page":"Multiplex Networks with Decorated Graphons","title":"Multiplex Networks with Decorated Graphons","text":"Interpretation:","category":"page"},{"location":"tutorials/03_multiplex_networks/","page":"Multiplex Networks with Decorated Graphons","title":"Multiplex Networks with Decorated Graphons","text":"Left: Layer 1 has higher density in the top-right (high positions)\nMiddle: Layer 2 has periodic structure with multiple dense regions\nRight: Positive correlation (red) where both layers are active, negative correlation (blue) where they anti-correlate","category":"page"},{"location":"tutorials/03_multiplex_networks/#Creating-Block-Models-for-Multiplex-Networks","page":"Multiplex Networks with Decorated Graphons","title":"Creating Block Models for Multiplex Networks","text":"","category":"section"},{"location":"tutorials/03_multiplex_networks/","page":"Multiplex Networks with Decorated Graphons","title":"Multiplex Networks with Decorated Graphons","text":"Just like simple graphons, we can discretize decorated graphons into block models for computational efficiency:","category":"page"},{"location":"tutorials/03_multiplex_networks/","page":"Multiplex Networks with Decorated Graphons","title":"Multiplex Networks with Decorated Graphons","text":"sbm_multiplex = empirical_graphon(graphon_mvb, 10)\n\nprintln(\"Block model type: \", typeof(sbm_multiplex))\nprintln(\"Number of blocks: \", length(sbm_multiplex.size))\n\n# Sample from the block model:\nA_sbm = sample_graph(sbm_multiplex, 200);\nnothing #hide","category":"page"},{"location":"tutorials/03_multiplex_networks/#Key-Takeaways","page":"Multiplex Networks with Decorated Graphons","title":"Key Takeaways","text":"","category":"section"},{"location":"tutorials/03_multiplex_networks/","page":"Multiplex Networks with Decorated Graphons","title":"Multiplex Networks with Decorated Graphons","text":"Decorated graphons return distributions instead of probabilities\nMultiplex networks can be modeled with discrete distributions over edge categories\nCategory probabilities can encode complex layer interactions\nWe can analyze marginal probabilities and correlations between layers\nAll the same tools work: rand, sample_graph, empirical_graphon\nThe MVBernoulli package helps analyze correlations in binary multiplex networks","category":"page"},{"location":"tutorials/03_multiplex_networks/#Extensions","page":"Multiplex Networks with Decorated Graphons","title":"Extensions","text":"","category":"section"},{"location":"tutorials/03_multiplex_networks/","page":"Multiplex Networks with Decorated Graphons","title":"Multiplex Networks with Decorated Graphons","text":"Decorated graphons can model many other structures:","category":"page"},{"location":"tutorials/03_multiplex_networks/","page":"Multiplex Networks with Decorated Graphons","title":"Multiplex Networks with Decorated Graphons","text":"Weighted networks: Use continuous distributions (Normal, Exponential, etc.)\nSigned networks: Positive and negative edges with distributions\nTemporal networks: Edge timing distributions\nAttributed graphs: Node or edge features from distributions","category":"page"},{"location":"tutorials/03_multiplex_networks/","page":"Multiplex Networks with Decorated Graphons","title":"Multiplex Networks with Decorated Graphons","text":"The flexibility of decorated graphons makes them a powerful tool for complex network modeling!","category":"page"},{"location":"tutorials/03_multiplex_networks/","page":"Multiplex Networks with Decorated Graphons","title":"Multiplex Networks with Decorated Graphons","text":"","category":"page"},{"location":"tutorials/03_multiplex_networks/","page":"Multiplex Networks with Decorated Graphons","title":"Multiplex Networks with Decorated Graphons","text":"This page was generated using Literate.jl.","category":"page"},{"location":"tutorials/04_custom_distributions/","page":"Custom Distributions","title":"Custom Distributions","text":"EditURL = \"../../literate/tutorials/04_custom_distributions.jl\"","category":"page"},{"location":"tutorials/04_custom_distributions/#Custom-Distributions-for-Decorated-Graphons","page":"Custom Distributions","title":"Custom Distributions for Decorated Graphons","text":"","category":"section"},{"location":"tutorials/04_custom_distributions/","page":"Custom Distributions","title":"Custom Distributions","text":"This tutorial demonstrates how to use custom distribution types with decorated graphons. While Graphons.jl works seamlessly with Distributions.jl, you can implement your own distribution types for specialized applications.","category":"page"},{"location":"tutorials/04_custom_distributions/","page":"Custom Distributions","title":"Custom Distributions","text":"We'll cover:","category":"page"},{"location":"tutorials/04_custom_distributions/","page":"Custom Distributions","title":"Custom Distributions","text":"The minimal interface required for custom distributions\nImplementing a custom categorical distribution\nUsing custom distributions in decorated graphons\nA practical example with network edge weights","category":"page"},{"location":"tutorials/04_custom_distributions/#Setup","page":"Custom Distributions","title":"Setup","text":"","category":"section"},{"location":"tutorials/04_custom_distributions/","page":"Custom Distributions","title":"Custom Distributions","text":"using Graphons\nusing Random\nusing CairoMakie\nusing Statistics\n\nRandom.seed!(42)","category":"page"},{"location":"tutorials/04_custom_distributions/#Understanding-the-Distribution-Interface","page":"Custom Distributions","title":"Understanding the Distribution Interface","text":"","category":"section"},{"location":"tutorials/04_custom_distributions/","page":"Custom Distributions","title":"Custom Distributions","text":"For a type to work as a distribution in DecoratedGraphon, it must implement:","category":"page"},{"location":"tutorials/04_custom_distributions/","page":"Custom Distributions","title":"Custom Distributions","text":"rand(rng::AbstractRNG, d::YourDistribution) - Sample from the distribution\neltype(d::YourDistribution) - Return the type of sampled values","category":"page"},{"location":"tutorials/04_custom_distributions/","page":"Custom Distributions","title":"Custom Distributions","text":"That's it! These two methods are sufficient for the graphon to sample edges.","category":"page"},{"location":"tutorials/04_custom_distributions/#Example-1:-Custom-Categorical-Distribution","page":"Custom Distributions","title":"Example 1: Custom Categorical Distribution","text":"","category":"section"},{"location":"tutorials/04_custom_distributions/","page":"Custom Distributions","title":"Custom Distributions","text":"Let's implement a simple categorical distribution that samples from a discrete set of values with specified probabilities.","category":"page"},{"location":"tutorials/04_custom_distributions/","page":"Custom Distributions","title":"Custom Distributions","text":"struct CustomCategorical{T}\n    values::Vector{T}\n    probabilities::Vector{Float64}\n    cumulative::Vector{Float64}  # Precomputed for efficiency\n\n    function CustomCategorical(values::Vector{T}, probs::Vector{Float64}) where T\n        @assert length(values) == length(probs) \"Values and probabilities must have same length\"\n        @assert sum(probs) ≈ 1.0 \"Probabilities must sum to 1\"\n        @assert all(p >= 0 for p in probs) \"Probabilities must be non-negative\"\n\n        # Precompute cumulative probabilities for faster sampling\n        cumulative = cumsum(probs)\n        new{T}(values, probs, cumulative)\n    end\nend","category":"page"},{"location":"tutorials/04_custom_distributions/","page":"Custom Distributions","title":"Custom Distributions","text":"Implement the required sampling method","category":"page"},{"location":"tutorials/04_custom_distributions/","page":"Custom Distributions","title":"Custom Distributions","text":"function Base.rand(rng::AbstractRNG, d::CustomCategorical)\n    u = rand(rng)\n    for (i, cum_prob) in enumerate(d.cumulative)\n        if u <= cum_prob\n            return d.values[i]\n        end\n    end\n    return d.values[end]  # Fallback for numerical precision\nend","category":"page"},{"location":"tutorials/04_custom_distributions/","page":"Custom Distributions","title":"Custom Distributions","text":"Implement the required eltype method","category":"page"},{"location":"tutorials/04_custom_distributions/","page":"Custom Distributions","title":"Custom Distributions","text":"Base.eltype(::CustomCategorical{T}) where T = T","category":"page"},{"location":"tutorials/04_custom_distributions/","page":"Custom Distributions","title":"Custom Distributions","text":"Optional: nice display","category":"page"},{"location":"tutorials/04_custom_distributions/","page":"Custom Distributions","title":"Custom Distributions","text":"function Base.show(io::IO, d::CustomCategorical)\n    print(io, \"CustomCategorical(\")\n    for (i, (v, p)) in enumerate(zip(d.values, d.probabilities))\n        print(io, v, \"=>\", round(p, digits=2))\n        if i < length(d.values)\n            print(io, \", \")\n        end\n    end\n    print(io, \")\")\nend","category":"page"},{"location":"tutorials/04_custom_distributions/","page":"Custom Distributions","title":"Custom Distributions","text":"Test our custom distribution:","category":"page"},{"location":"tutorials/04_custom_distributions/","page":"Custom Distributions","title":"Custom Distributions","text":"dist = CustomCategorical([1, 2, 3], [0.5, 0.3, 0.2])\nsamples = [rand(dist) for _ in 1:1000]\nprintln(\"Distribution: \", dist)\nprintln(\"Sample mean: \", mean(samples), \" (expected: \", sum(dist.values .* dist.probabilities), \")\")\nprintln(\"Sample frequencies: \", [count(==(i), samples) for i in 1:3])","category":"page"},{"location":"tutorials/04_custom_distributions/#Example-2:-Position-Dependent-Edge-Types","page":"Custom Distributions","title":"Example 2: Position-Dependent Edge Types","text":"","category":"section"},{"location":"tutorials/04_custom_distributions/","page":"Custom Distributions","title":"Custom Distributions","text":"Now let's create a decorated graphon where the edge type depends on node positions. We'll model a network with three types of edges: weak (1), medium (2), strong (3).","category":"page"},{"location":"tutorials/04_custom_distributions/","page":"Custom Distributions","title":"Custom Distributions","text":"function W_edge_strength(x, y)\n    distance = abs(x - y)\n\n    if distance < 0.3\n        # Close nodes: mostly strong connections\n        return CustomCategorical([1, 2, 3], [0.1, 0.2, 0.7])\n    elseif distance < 0.6\n        # Medium distance: balanced\n        return CustomCategorical([1, 2, 3], [0.3, 0.4, 0.3])\n    else\n        # Far apart: mostly weak connections\n        return CustomCategorical([1, 2, 3], [0.6, 0.3, 0.1])\n    end\nend\n\ngraphon_strength = DecoratedGraphon(W_edge_strength)","category":"page"},{"location":"tutorials/04_custom_distributions/","page":"Custom Distributions","title":"Custom Distributions","text":"Sample a network:","category":"page"},{"location":"tutorials/04_custom_distributions/","page":"Custom Distributions","title":"Custom Distributions","text":"n = 100\nA_strength = sample_graph(graphon_strength, n)\n\nprintln(\"Edge type distribution:\")\nprintln(\"  Weak (1):   \", count(==(1), A_strength), \" (\", round(count(==(1), A_strength) / n^2 * 100, digits=1), \"%)\")\nprintln(\"  Medium (2): \", count(==(2), A_strength), \" (\", round(count(==(2), A_strength) / n^2 * 100, digits=1), \"%)\")\nprintln(\"  Strong (3): \", count(==(3), A_strength), \" (\", round(count(==(3), A_strength) / n^2 * 100, digits=1), \"%)\")","category":"page"},{"location":"tutorials/04_custom_distributions/#Visualizing-Edge-Strength-Patterns","page":"Custom Distributions","title":"Visualizing Edge Strength Patterns","text":"","category":"section"},{"location":"tutorials/04_custom_distributions/","page":"Custom Distributions","title":"Custom Distributions","text":"fig = Figure(size=(1200, 400))\n\n# Show the three edge types separately\nfor (i, (edge_type, label)) in enumerate(zip([1, 2, 3], [\"Weak\", \"Medium\", \"Strong\"]))\n    ax = Axis(fig[1, i],\n        title=\"$label Edges (type=$edge_type)\",\n        aspect=1)\n    hidedecorations!(ax)\n\n    A_binary = zeros(Bool, n, n)\n    A_binary[A_strength.==edge_type] .= true\n    heatmap!(ax, A_binary, colormap=:binary)\nend\n\nfig","category":"page"},{"location":"tutorials/04_custom_distributions/","page":"Custom Distributions","title":"Custom Distributions","text":"Notice how strong edges (type 3) cluster along the diagonal (similar positions), while weak edges (type 1) are more common far from the diagonal!","category":"page"},{"location":"tutorials/04_custom_distributions/#Example-3:-Custom-Weighted-Distribution","page":"Custom Distributions","title":"Example 3: Custom Weighted Distribution","text":"","category":"section"},{"location":"tutorials/04_custom_distributions/","page":"Custom Distributions","title":"Custom Distributions","text":"Let's create a custom distribution for continuous edge weights that aren't available in Distributions.jl. We'll implement a truncated power-law distribution.","category":"page"},{"location":"tutorials/04_custom_distributions/","page":"Custom Distributions","title":"Custom Distributions","text":"struct TruncatedPowerLaw\n    α::Float64      # Power-law exponent\n    x_min::Float64  # Minimum value\n    x_max::Float64  # Maximum value\n\n    function TruncatedPowerLaw(α, x_min, x_max)\n        @assert α > 0 \"Exponent must be positive\"\n        @assert x_max > x_min > 0 \"Must have x_max > x_min > 0\"\n        new(α, x_min, x_max)\n    end\nend\n\nfunction Base.rand(rng::AbstractRNG, d::TruncatedPowerLaw)\n    # Inverse transform sampling for power law\n    u = rand(rng)\n    if d.α ≈ 1.0\n        return d.x_min * exp(u * log(d.x_max / d.x_min))\n    else\n        a = 1 - d.α\n        return (d.x_min^a + u * (d.x_max^a - d.x_min^a))^(1 / a)\n    end\nend\n\nBase.eltype(::TruncatedPowerLaw) = Float64\n\nfunction Base.show(io::IO, d::TruncatedPowerLaw)\n    print(io, \"TruncatedPowerLaw(α=\", d.α, \", range=[\", d.x_min, \", \", d.x_max, \"])\")\nend","category":"page"},{"location":"tutorials/04_custom_distributions/","page":"Custom Distributions","title":"Custom Distributions","text":"Create a graphon with power-law weighted edges:","category":"page"},{"location":"tutorials/04_custom_distributions/","page":"Custom Distributions","title":"Custom Distributions","text":"function W_powerlaw(x, y)\n    # Exponent depends on positions\n    α = 1.5 + 2.0 * min(x, y)  # α between 1.5 and 3.5\n    return TruncatedPowerLaw(α, 0.1, 10.0)\nend\n\ngraphon_powerlaw = DecoratedGraphon(W_powerlaw)\nA_powerlaw = sample_graph(graphon_powerlaw, 100)\n\nprintln(\"Power-law weighted network:\")\nprintln(\"  Mean weight: \", mean(A_powerlaw))\nprintln(\"  Median weight: \", median(A_powerlaw))\nprintln(\"  Weight range: [\", minimum(A_powerlaw), \", \", maximum(A_powerlaw), \"]\")","category":"page"},{"location":"tutorials/04_custom_distributions/","page":"Custom Distributions","title":"Custom Distributions","text":"Visualize the weighted network:","category":"page"},{"location":"tutorials/04_custom_distributions/","page":"Custom Distributions","title":"Custom Distributions","text":"fig = Figure(size=(900, 400))\n\nax1 = Axis(fig[1, 1],\n    title=\"Edge Weights (log scale)\",\n    aspect=1)\nhidedecorations!(ax1)\nheatmap!(ax1, log10.(A_powerlaw .+ 0.01), colormap=:viridis)\n\nax2 = Axis(fig[1, 2],\n    title=\"Weight Distribution\",\n    xlabel=\"Edge Weight\",\n    ylabel=\"Frequency\")\nhist!(ax2, vec(A_powerlaw), bins=50, color=(:blue, 0.5))\n\nfig","category":"page"},{"location":"tutorials/04_custom_distributions/#Example-4:-Multi-Value-Edge-Attributes","page":"Custom Distributions","title":"Example 4: Multi-Value Edge Attributes","text":"","category":"section"},{"location":"tutorials/04_custom_distributions/","page":"Custom Distributions","title":"Custom Distributions","text":"We can also create distributions that return multiple attributes per edge. For efficiency, we use StaticArrays.SVector:","category":"page"},{"location":"tutorials/04_custom_distributions/","page":"Custom Distributions","title":"Custom Distributions","text":"using StaticArrays\n\nstruct MultiAttributeEdge\n    base_prob::Float64\nend\n\nfunction Base.rand(rng::AbstractRNG, d::MultiAttributeEdge)\n    # Return a vector of [weight, confidence, timestamp]\n    if rand(rng) < d.base_prob\n        weight = rand(rng) * 10.0\n        confidence = rand(rng)\n        timestamp = rand(rng, 1:100)\n        return SVector(weight, confidence, Float64(timestamp))\n    else\n        return SVector(0.0, 0.0, 0.0)  # No edge\n    end\nend\n\nBase.eltype(::MultiAttributeEdge) = SVector{3,Float64}\n\nfunction Base.show(io::IO, d::MultiAttributeEdge)\n    print(io, \"MultiAttributeEdge(p=\", d.base_prob, \")\")\nend","category":"page"},{"location":"tutorials/04_custom_distributions/","page":"Custom Distributions","title":"Custom Distributions","text":"Create a graphon with multi-attribute edges:","category":"page"},{"location":"tutorials/04_custom_distributions/","page":"Custom Distributions","title":"Custom Distributions","text":"function W_multiattr(x, y)\n    prob = x * y * 0.5\n    return MultiAttributeEdge(prob)\nend\n\ngraphon_multi = DecoratedGraphon(W_multiattr)\nA_multi = sample_graph(graphon_multi, 50)\n\nprintln(\"Multi-attribute network shape: \", size(A_multi))\nprintln(\"Edge attribute vector type: \", typeof(A_multi[1, 1]))","category":"page"},{"location":"tutorials/04_custom_distributions/","page":"Custom Distributions","title":"Custom Distributions","text":"Extract individual attributes:","category":"page"},{"location":"tutorials/04_custom_distributions/","page":"Custom Distributions","title":"Custom Distributions","text":"weights = [a[1] for a in A_multi]\nconfidences = [a[2] for a in A_multi]\ntimestamps = [a[3] for a in A_multi]\n\nfig = Figure(size=(1200, 350))\n\nax1 = Axis(fig[1, 1], title=\"Weights\", aspect=1)\nhidedecorations!(ax1)\nheatmap!(ax1, weights, colormap=:viridis)\n\nax2 = Axis(fig[1, 2], title=\"Confidences\", aspect=1)\nhidedecorations!(ax2)\nheatmap!(ax2, confidences, colormap=:viridis)\n\nax3 = Axis(fig[1, 3], title=\"Timestamps\", aspect=1)\nhidedecorations!(ax3)\nheatmap!(ax3, timestamps, colormap=:viridis)\n\nfig","category":"page"},{"location":"tutorials/04_custom_distributions/#Key-Takeaways","page":"Custom Distributions","title":"Key Takeaways","text":"","category":"section"},{"location":"tutorials/04_custom_distributions/","page":"Custom Distributions","title":"Custom Distributions","text":"Minimal interface: Only rand(rng, d) and eltype(d) are required\nFlexibility: Can implement any sampling logic you need\nPerformance: Pre-compute what you can (like cumulative probabilities)\nType stability: Use concrete types and SVector for multi-valued returns\nIntegration: Works seamlessly with all Graphons.jl functionality","category":"page"},{"location":"tutorials/04_custom_distributions/#When-to-Use-Custom-Distributions","page":"Custom Distributions","title":"When to Use Custom Distributions","text":"","category":"section"},{"location":"tutorials/04_custom_distributions/","page":"Custom Distributions","title":"Custom Distributions","text":"Consider implementing custom distributions when:","category":"page"},{"location":"tutorials/04_custom_distributions/","page":"Custom Distributions","title":"Custom Distributions","text":"You need a distribution not available in Distributions.jl\nYou want specialized sampling logic (e.g., rejection sampling)\nYou need very high performance for a specific distribution\nYou're working with complex multi-attribute edges\nYou want to integrate with external libraries or data sources","category":"page"},{"location":"tutorials/04_custom_distributions/#Next-Steps","page":"Custom Distributions","title":"Next Steps","text":"","category":"section"},{"location":"tutorials/04_custom_distributions/","page":"Custom Distributions","title":"Custom Distributions","text":"For standard distributions, use Distributions.jl (it's faster and well-tested)\nFor complex sampling logic, consider making your type a subtype of Distributions.Sampleable\nProfile your custom distributions to ensure good performance\nSee the Distributions.jl documentation for more advanced features","category":"page"},{"location":"tutorials/04_custom_distributions/","page":"Custom Distributions","title":"Custom Distributions","text":"","category":"page"},{"location":"tutorials/04_custom_distributions/","page":"Custom Distributions","title":"Custom Distributions","text":"This page was generated using Literate.jl.","category":"page"},{"location":"tutorials/01_simple_graphon/","page":"Getting Started with Graphons","title":"Getting Started with Graphons","text":"EditURL = \"../../literate/tutorials/01_simple_graphon.jl\"","category":"page"},{"location":"tutorials/01_simple_graphon/#Getting-Started-with-Graphons","page":"Getting Started with Graphons","title":"Getting Started with Graphons","text":"","category":"section"},{"location":"tutorials/01_simple_graphon/","page":"Getting Started with Graphons","title":"Getting Started with Graphons","text":"This tutorial introduces graphons and shows how to use Graphons.jl to sample random graphs. We'll cover the basic concepts, create simple graphon models, and visualize the results.","category":"page"},{"location":"tutorials/01_simple_graphon/#What-is-a-Graphon?","page":"Getting Started with Graphons","title":"What is a Graphon?","text":"","category":"section"},{"location":"tutorials/01_simple_graphon/","page":"Getting Started with Graphons","title":"Getting Started with Graphons","text":"A graphon (short for \"graph function\") is a mathematical object that represents the limit of large random graphs. Formally, it's a symmetric, measurable function:","category":"page"},{"location":"tutorials/01_simple_graphon/","page":"Getting Started with Graphons","title":"Getting Started with Graphons","text":"W 0 1^2 to 0 1","category":"page"},{"location":"tutorials/01_simple_graphon/","page":"Getting Started with Graphons","title":"Getting Started with Graphons","text":"Think of a graphon as a continuous generalization of a stochastic block model (SBM). Instead of discrete blocks, every point in the unit square [0,1]² has an associated probability.","category":"page"},{"location":"tutorials/01_simple_graphon/#How-Graphs-are-Generated-from-Graphons","page":"Getting Started with Graphons","title":"How Graphs are Generated from Graphons","text":"","category":"section"},{"location":"tutorials/01_simple_graphon/","page":"Getting Started with Graphons","title":"Getting Started with Graphons","text":"To sample a random graph with n nodes from a graphon W:","category":"page"},{"location":"tutorials/01_simple_graphon/","page":"Getting Started with Graphons","title":"Getting Started with Graphons","text":"Assign latent positions: For each node i, draw a random position ξᵢ ~ Uniform[0,1]\nSample edges: For each pair of nodes (i,j), the probability of an edge is:","category":"page"},{"location":"tutorials/01_simple_graphon/","page":"Getting Started with Graphons","title":"Getting Started with Graphons","text":"P(textedge between  i text and  j) = W(xi_i xi_j)","category":"page"},{"location":"tutorials/01_simple_graphon/","page":"Getting Started with Graphons","title":"Getting Started with Graphons","text":"The latent positions ξᵢ represent hidden \"types\" or \"communities\" of nodes. Nodes with similar latent positions are more (or less) likely to connect, depending on the graphon function W.","category":"page"},{"location":"tutorials/01_simple_graphon/#Setup","page":"Getting Started with Graphons","title":"Setup","text":"","category":"section"},{"location":"tutorials/01_simple_graphon/","page":"Getting Started with Graphons","title":"Getting Started with Graphons","text":"Let's load the packages we'll need:","category":"page"},{"location":"tutorials/01_simple_graphon/","page":"Getting Started with Graphons","title":"Getting Started with Graphons","text":"using Graphons\nusing Random\nusing CairoMakie","category":"page"},{"location":"tutorials/01_simple_graphon/#Example-1:-A-Simple-Quadratic-Graphon","page":"Getting Started with Graphons","title":"Example 1: A Simple Quadratic Graphon","text":"","category":"section"},{"location":"tutorials/01_simple_graphon/","page":"Getting Started with Graphons","title":"Getting Started with Graphons","text":"We'll start with a classic example: W(x,y) = x·y","category":"page"},{"location":"tutorials/01_simple_graphon/","page":"Getting Started with Graphons","title":"Getting Started with Graphons","text":"This graphon creates graphs where nodes with higher latent positions (closer to 1) are more likely to have edges. Nodes near 0 are sparse, while nodes near 1 form a dense subgraph.","category":"page"},{"location":"tutorials/01_simple_graphon/","page":"Getting Started with Graphons","title":"Getting Started with Graphons","text":"First, define the graphon function:","category":"page"},{"location":"tutorials/01_simple_graphon/","page":"Getting Started with Graphons","title":"Getting Started with Graphons","text":"function W_quadratic(x, y)\n    return x * y\nend","category":"page"},{"location":"tutorials/01_simple_graphon/","page":"Getting Started with Graphons","title":"Getting Started with Graphons","text":"Create a SimpleContinuousGraphon object:","category":"page"},{"location":"tutorials/01_simple_graphon/","page":"Getting Started with Graphons","title":"Getting Started with Graphons","text":"graphon = SimpleContinuousGraphon(W_quadratic)","category":"page"},{"location":"tutorials/01_simple_graphon/","page":"Getting Started with Graphons","title":"Getting Started with Graphons","text":"Now we can evaluate the edge probability at any point:","category":"page"},{"location":"tutorials/01_simple_graphon/","page":"Getting Started with Graphons","title":"Getting Started with Graphons","text":"@show graphon(0.2, 0.8)  # Low probability\n@show graphon(0.9, 0.9)  # High probability\nnothing # hide","category":"page"},{"location":"tutorials/01_simple_graphon/#Visualizing-the-Graphon","page":"Getting Started with Graphons","title":"Visualizing the Graphon","text":"","category":"section"},{"location":"tutorials/01_simple_graphon/","page":"Getting Started with Graphons","title":"Getting Started with Graphons","text":"Let's visualize the graphon function as a heatmap. Brighter colors indicate higher edge probabilities.","category":"page"},{"location":"tutorials/01_simple_graphon/","page":"Getting Started with Graphons","title":"Getting Started with Graphons","text":"fig = Figure(size=(500, 450))\nax = Axis(fig[1, 1],\n    xlabel=\"Latent position x\",\n    ylabel=\"Latent position y\",\n    title=\"Graphon W(x,y) = x·y\",\n    aspect=1)\nhm = heatmap!(ax, graphon, colormap=:binary, colorrange=(0, 1))\nColorbar(fig[1, 2], hm, label=\"Edge probability\")\nfig","category":"page"},{"location":"tutorials/01_simple_graphon/","page":"Getting Started with Graphons","title":"Getting Started with Graphons","text":"The diagonal pattern shows that nodes with similar (and high) latent positions are very likely to connect.","category":"page"},{"location":"tutorials/01_simple_graphon/#Sampling-Random-Graphs","page":"Getting Started with Graphons","title":"Sampling Random Graphs","text":"","category":"section"},{"location":"tutorials/01_simple_graphon/","page":"Getting Started with Graphons","title":"Getting Started with Graphons","text":"Now let's sample actual graphs from this graphon!","category":"page"},{"location":"tutorials/01_simple_graphon/#Random-Latent-Positions","page":"Getting Started with Graphons","title":"Random Latent Positions","text":"","category":"section"},{"location":"tutorials/01_simple_graphon/","page":"Getting Started with Graphons","title":"Getting Started with Graphons","text":"The simplest way is to use rand, which automatically draws random latent positions:","category":"page"},{"location":"tutorials/01_simple_graphon/","page":"Getting Started with Graphons","title":"Getting Started with Graphons","text":"Random.seed!(42)\nA_random = rand(graphon, 100);\nnothing #hide","category":"page"},{"location":"tutorials/01_simple_graphon/","page":"Getting Started with Graphons","title":"Getting Started with Graphons","text":"This creates a 100×100 adjacency matrix. Let's visualize it:","category":"page"},{"location":"tutorials/01_simple_graphon/","page":"Getting Started with Graphons","title":"Getting Started with Graphons","text":"fig = Figure(size=(500, 450))\nax = Axis(fig[1, 1],\n    title=\"Random graph (n=100)\",\n    aspect=1)\nheatmap!(ax, A_random, colormap=:binary)\nfig","category":"page"},{"location":"tutorials/01_simple_graphon/","page":"Getting Started with Graphons","title":"Getting Started with Graphons","text":"Notice how edges cluster in the bottom-right corner? That's because nodes with high latent positions (drawn randomly) tend to connect more densely.","category":"page"},{"location":"tutorials/01_simple_graphon/#Fixed-Latent-Positions","page":"Getting Started with Graphons","title":"Fixed Latent Positions","text":"","category":"section"},{"location":"tutorials/01_simple_graphon/","page":"Getting Started with Graphons","title":"Getting Started with Graphons","text":"Sometimes we want reproducible graphs or to see the structure more clearly. Use sample_graph with explicit latent positions:","category":"page"},{"location":"tutorials/01_simple_graphon/","page":"Getting Started with Graphons","title":"Getting Started with Graphons","text":"ξs = 0.0:0.01:1.0  # Evenly spaced from 0 to 1\nA_ordered = sample_graph(graphon, ξs)\n\nfig = Figure(size=(500, 450))\nax = Axis(fig[1, 1],\n    title=\"Ordered graph (n=$(length(ξs)))\",\n    aspect=1)\nheatmap!(ax, A_ordered, colormap=:binary)\nfig","category":"page"},{"location":"tutorials/01_simple_graphon/","page":"Getting Started with Graphons","title":"Getting Started with Graphons","text":"With ordered latents, the structure is crystal clear! The density increases smoothly from top-left (sparse) to bottom-right (dense).","category":"page"},{"location":"tutorials/01_simple_graphon/#Working-with-Sparse-Matrices","page":"Getting Started with Graphons","title":"Working with Sparse Matrices","text":"","category":"section"},{"location":"tutorials/01_simple_graphon/","page":"Getting Started with Graphons","title":"Getting Started with Graphons","text":"For large, sparse graphs, use sparse matrix representations for efficiency:","category":"page"},{"location":"tutorials/01_simple_graphon/","page":"Getting Started with Graphons","title":"Getting Started with Graphons","text":"using SparseArrays","category":"page"},{"location":"tutorials/01_simple_graphon/","page":"Getting Started with Graphons","title":"Getting Started with Graphons","text":"Create a sparse-matrix graphon:","category":"page"},{"location":"tutorials/01_simple_graphon/","page":"Getting Started with Graphons","title":"Getting Started with Graphons","text":"graphon_sparse = SimpleContinuousGraphon(W_quadratic, SparseMatrixCSC{Bool,Int})","category":"page"},{"location":"tutorials/01_simple_graphon/","page":"Getting Started with Graphons","title":"Getting Started with Graphons","text":"Sample a large sparse graph:","category":"page"},{"location":"tutorials/01_simple_graphon/","page":"Getting Started with Graphons","title":"Getting Started with Graphons","text":"A_sparse = rand(graphon_sparse, 1000)\n\nprintln(\"Matrix type: \", typeof(A_sparse))\nprintln(\"Number of nonzeros: \", nnz(A_sparse))\nprintln(\"Density: \", nnz(A_sparse) / (1000^2) * 100, \"%\")","category":"page"},{"location":"tutorials/01_simple_graphon/#Key-Takeaways","page":"Getting Started with Graphons","title":"Key Takeaways","text":"","category":"section"},{"location":"tutorials/01_simple_graphon/","page":"Getting Started with Graphons","title":"Getting Started with Graphons","text":"Graphons are continuous functions W: [0,1]² → [0,1] that generate random graphs\nLatent positions ξᵢ ∈ [0,1] determine each node's \"type\"\nEdge probability between nodes i and j is W(ξᵢ, ξⱼ)\nUse rand(graphon, n) for random graphs with random latents\nUse sample_graph(graphon, ξs) for controlled/reproducible graphs\nUse empirical_graphon(graphon, k) to discretize into k-block SBMs\nSparse matrices are efficient for large, low-density graphs","category":"page"},{"location":"tutorials/01_simple_graphon/#Next-Steps","page":"Getting Started with Graphons","title":"Next Steps","text":"","category":"section"},{"location":"tutorials/01_simple_graphon/","page":"Getting Started with Graphons","title":"Getting Started with Graphons","text":"For more on Stochastic Block Models with community structures and core-periphery patterns, see the next tutorial on Block Models\nFor multiplex networks and graphs with rich edge attributes (weights, types, etc.), see the Decorated Graphons tutorial","category":"page"},{"location":"tutorials/01_simple_graphon/","page":"Getting Started with Graphons","title":"Getting Started with Graphons","text":"","category":"page"},{"location":"tutorials/01_simple_graphon/","page":"Getting Started with Graphons","title":"Getting Started with Graphons","text":"This page was generated using Literate.jl.","category":"page"},{"location":"tutorials/02_multiplex_networks/","page":"Multiplex Networks","title":"Multiplex Networks","text":"EditURL = \"../../literate/tutorials/02_multiplex_networks.jl\"","category":"page"},{"location":"tutorials/02_multiplex_networks/#Multiplex-Networks-with-Decorated-Graphons","page":"Multiplex Networks","title":"Multiplex Networks with Decorated Graphons","text":"","category":"section"},{"location":"tutorials/02_multiplex_networks/","page":"Multiplex Networks","title":"Multiplex Networks","text":"In this tutorial, we'll learn how to model multiplex networks (graphs with multiple types of edges or layers) using decorated graphons. This is a powerful extension that goes beyond simple binary graphs.","category":"page"},{"location":"tutorials/02_multiplex_networks/","page":"Multiplex Networks","title":"Multiplex Networks","text":"We'll build a 2-layer network where:","category":"page"},{"location":"tutorials/02_multiplex_networks/","page":"Multiplex Networks","title":"Multiplex Networks","text":"Each edge can exist on layer 1, layer 2, both layers, or neither\nThe probabilities depend on the latent positions of nodes\nWe can analyze correlations between layers","category":"page"},{"location":"tutorials/02_multiplex_networks/#Motivation:-Why-Decorated-Graphons?","page":"Multiplex Networks","title":"Motivation: Why Decorated Graphons?","text":"","category":"section"},{"location":"tutorials/02_multiplex_networks/","page":"Multiplex Networks","title":"Multiplex Networks","text":"Real-world networks often have multiple types of relationships:","category":"page"},{"location":"tutorials/02_multiplex_networks/","page":"Multiplex Networks","title":"Multiplex Networks","text":"Social networks: friendships, professional connections, family ties\nBrain networks: anatomical connections, functional correlations\nTransportation: roads, railways, air routes","category":"page"},{"location":"tutorials/02_multiplex_networks/","page":"Multiplex Networks","title":"Multiplex Networks","text":"A decorated graphon returns not just edge probabilities, but entire distributions over edge types or weights. This lets us model rich, structured networks.","category":"page"},{"location":"tutorials/02_multiplex_networks/#Setup","page":"Multiplex Networks","title":"Setup","text":"","category":"section"},{"location":"tutorials/02_multiplex_networks/","page":"Multiplex Networks","title":"Multiplex Networks","text":"Load the packages we'll need:","category":"page"},{"location":"tutorials/02_multiplex_networks/","page":"Multiplex Networks","title":"Multiplex Networks","text":"using Random\nusing Distributions\nusing StaticArrays\nusing Graphons\nusing CairoMakie\n\nRandom.seed!(42)","category":"page"},{"location":"tutorials/02_multiplex_networks/#Understanding-the-Four-Category-Model","page":"Multiplex Networks","title":"Understanding the Four-Category Model","text":"","category":"section"},{"location":"tutorials/02_multiplex_networks/","page":"Multiplex Networks","title":"Multiplex Networks","text":"For a 2-layer multiplex network, each pair of nodes (i,j) can be in one of four categories:","category":"page"},{"location":"tutorials/02_multiplex_networks/","page":"Multiplex Networks","title":"Multiplex Networks","text":"Category Binary Layer 1 Layer 2 Interpretation\n0 00 No No No connection\n1 10 Yes No Only layer 1\n2 01 No Yes Only layer 2\n3 11 Yes Yes Both layers","category":"page"},{"location":"tutorials/02_multiplex_networks/","page":"Multiplex Networks","title":"Multiplex Networks","text":"Instead of returning a single edge probability, our graphon will return a discrete probability distribution over these 4 categories.","category":"page"},{"location":"tutorials/02_multiplex_networks/#Defining-a-Decorated-Graphon","page":"Multiplex Networks","title":"Defining a Decorated Graphon","text":"","category":"section"},{"location":"tutorials/02_multiplex_networks/","page":"Multiplex Networks","title":"Multiplex Networks","text":"Let's create a graphon function that returns interesting structure. The function will assign probabilities to each of the four categories:","category":"page"},{"location":"tutorials/02_multiplex_networks/","page":"Multiplex Networks","title":"Multiplex Networks","text":"Category 1 (layer 1 only): Probability increases with distance between x and y\nCategory 2 (layer 2 only): Periodic pattern based on position synchronization\nCategory 3 (both layers): Probability increases when both x and y are similar and high\nCategory 0 (no edge): Whatever probability remains","category":"page"},{"location":"tutorials/02_multiplex_networks/","page":"Multiplex Networks","title":"Multiplex Networks","text":"Here's the implementation:","category":"page"},{"location":"tutorials/02_multiplex_networks/","page":"Multiplex Networks","title":"Multiplex Networks","text":"function W_multiplex(x, y)\n    ps = zeros(4)\n    ps[2] = sqrt(abs(x - y)) / 2           # layer 1 only\n    ps[3] = abs(sin(2π * x) * sin(2π * y)) / 2  # layer 2 only\n    ps[4] = min(x, y) / 4                   # both layers\n    ps[1] = 1 - sum(ps[2:4])                # no edge\n    return DiscreteNonParametric(0:3, SVector{4}(ps))\nend","category":"page"},{"location":"tutorials/02_multiplex_networks/","page":"Multiplex Networks","title":"Multiplex Networks","text":"Create the decorated graphon:","category":"page"},{"location":"tutorials/02_multiplex_networks/","page":"Multiplex Networks","title":"Multiplex Networks","text":"graphon_multiplex = DecoratedGraphon(W_multiplex)","category":"page"},{"location":"tutorials/02_multiplex_networks/","page":"Multiplex Networks","title":"Multiplex Networks","text":"Let's check what it returns:","category":"page"},{"location":"tutorials/02_multiplex_networks/","page":"Multiplex Networks","title":"Multiplex Networks","text":"@show dist = graphon_multiplex(0.3, 0.7)\n@show probs(dist)  # Probabilities for categories 0, 1, 2, 3\nnothing # hide","category":"page"},{"location":"tutorials/02_multiplex_networks/#Visualizing-Category-Probabilities","page":"Multiplex Networks","title":"Visualizing Category Probabilities","text":"","category":"section"},{"location":"tutorials/02_multiplex_networks/","page":"Multiplex Networks","title":"Multiplex Networks","text":"Let's visualize how the probability of each category varies across the latent space [0,1]²:","category":"page"},{"location":"tutorials/02_multiplex_networks/","page":"Multiplex Networks","title":"Multiplex Networks","text":"fig = Figure(size=(800, 700))\n\nlabels = [\n    \"Category 0\\n(No edges)\",\n    \"Category 1\\n(Layer 1 only)\",\n    \"Category 2\\n(Layer 2 only)\",\n    \"Category 3\\n(Both layers)\"\n]\n\nfor i in 1:4\n    row = (i - 1) ÷ 2 + 1\n    col = (i - 1) % 2 + 1\n\n    ax = Axis(fig[row, col],\n        title=labels[i],\n        xlabel=\"Position x\",\n        ylabel=\"Position y\",\n        aspect=1)\n\n    hm = heatmap!(ax, graphon_multiplex, i,\n        colormap=:binary,\n        colorrange=(0, 1))\nend\n\nColorbar(fig[:, 3], colormap=:binary, colorrange=(0, 1),\n    label=\"Probability\")\n\nfig","category":"page"},{"location":"tutorials/02_multiplex_networks/","page":"Multiplex Networks","title":"Multiplex Networks","text":"Interpretation:","category":"page"},{"location":"tutorials/02_multiplex_networks/","page":"Multiplex Networks","title":"Multiplex Networks","text":"Top-left: Most pairs have no edges (high p₀₀)\nTop-right: Layer 1 edges increase with distance (p₁₀)\nBottom-left: Layer 2 has periodic structure (p₀₁)\nBottom-right: Both layers appear for similar, high-position nodes (p₁₁)","category":"page"},{"location":"tutorials/02_multiplex_networks/#Sampling-a-Multiplex-Network","page":"Multiplex Networks","title":"Sampling a Multiplex Network","text":"","category":"section"},{"location":"tutorials/02_multiplex_networks/","page":"Multiplex Networks","title":"Multiplex Networks","text":"Now let's sample an actual network with 300 nodes:","category":"page"},{"location":"tutorials/02_multiplex_networks/","page":"Multiplex Networks","title":"Multiplex Networks","text":"n = 300\nA_categories = sample_graph(graphon_multiplex, n)\n\nprintln(\"Matrix type: \", typeof(A_categories))\nprintln(\"Matrix size: \", size(A_categories))\nprintln(\"Categories present: \", unique(A_categories))","category":"page"},{"location":"tutorials/02_multiplex_networks/","page":"Multiplex Networks","title":"Multiplex Networks","text":"The matrix contains category labels (0, 1, 2, 3) for each edge pair.","category":"page"},{"location":"tutorials/02_multiplex_networks/#Visualizing-the-Category-Structure","page":"Multiplex Networks","title":"Visualizing the Category Structure","text":"","category":"section"},{"location":"tutorials/02_multiplex_networks/","page":"Multiplex Networks","title":"Multiplex Networks","text":"Let's see how the categories are distributed in the sampled network:","category":"page"},{"location":"tutorials/02_multiplex_networks/","page":"Multiplex Networks","title":"Multiplex Networks","text":"fig = Figure(size=(900, 800))\n\nfor (idx, (cat, label)) in enumerate(zip(0:3, labels))\n    row = (idx - 1) ÷ 2 + 1\n    col = (idx - 1) % 2 + 1\n\n    ax = Axis(fig[row, col],\n        title=label * \" (n=$(count(==(cat), A_categories)))\",\n        aspect=1)\n    hidedecorations!(ax)\n\n    A_binary = zeros(Bool, n, n)\n    A_binary[A_categories.==cat] .= true\n\n    heatmap!(ax, A_binary, colormap=:binary)\nend\n\nfig","category":"page"},{"location":"tutorials/02_multiplex_networks/","page":"Multiplex Networks","title":"Multiplex Networks","text":"Notice how each category creates a different pattern!","category":"page"},{"location":"tutorials/02_multiplex_networks/#Extracting-Individual-Layers","page":"Multiplex Networks","title":"Extracting Individual Layers","text":"","category":"section"},{"location":"tutorials/02_multiplex_networks/","page":"Multiplex Networks","title":"Multiplex Networks","text":"For analysis, we often want separate adjacency matrices for each layer:","category":"page"},{"location":"tutorials/02_multiplex_networks/","page":"Multiplex Networks","title":"Multiplex Networks","text":"A_layer1 = zeros(Bool, n, n)\nA_layer1[A_categories.∈Ref([1, 3])] .= true # Layer 1: present in categories 1 and 3\n\n\nA_layer2 = zeros(Bool, n, n)\nA_layer2[A_categories.∈Ref([2, 3])] .= true # Layer 2: present in categories 2 and 3\n\n\nprintln(\"Layer 1 density: \", sum(A_layer1) / (n^2) * 100, \"%\")\nprintln(\"Layer 2 density: \", sum(A_layer2) / (n^2) * 100, \"%\")\nprintln(\"Overlap (both layers): \", sum(A_layer1 .& A_layer2) / (n^2) * 100, \"%\")","category":"page"},{"location":"tutorials/02_multiplex_networks/","page":"Multiplex Networks","title":"Multiplex Networks","text":"Visualize the two layers:","category":"page"},{"location":"tutorials/02_multiplex_networks/","page":"Multiplex Networks","title":"Multiplex Networks","text":"fig = Figure(size=(900, 400))\n\nax1 = Axis(fig[1, 1],\n    title=\"Layer 1 (Distance-based)\",\n    aspect=1)\nax2 = Axis(fig[1, 2],\n    title=\"Layer 2 (Periodic)\",\n    aspect=1)\n\nhidedecorations!(ax1)\nhidedecorations!(ax2)\n\nheatmap!(ax1, A_layer1, colormap=:binary)\nheatmap!(ax2, A_layer2, colormap=:binary)\n\nfig","category":"page"},{"location":"tutorials/02_multiplex_networks/#Advanced:-Analyzing-Marginals-and-Correlations","page":"Multiplex Networks","title":"Advanced: Analyzing Marginals and Correlations","text":"","category":"section"},{"location":"tutorials/02_multiplex_networks/","page":"Multiplex Networks","title":"Multiplex Networks","text":"We can go beyond categories and think about the marginal probabilities for each layer and their correlation.","category":"page"},{"location":"tutorials/02_multiplex_networks/","page":"Multiplex Networks","title":"Multiplex Networks","text":"For this, we'll use the MVBernoulli package to convert category probabilities into a multivariate Bernoulli distribution. The category probabilities [p00, p10, p01, p11] map to a joint probability table for two binary variables:","category":"page"},{"location":"tutorials/02_multiplex_networks/","page":"Multiplex Networks","title":"Multiplex Networks","text":"using MVBernoulli\n\nfunction W_mvbernoulli(x, y)\n    cat_probs = probs(W_multiplex(x, y))\n    return MVBernoulli.from_tabulation([cat_probs...])\nend\n\ngraphon_mvb = DecoratedGraphon(W_mvbernoulli)","category":"page"},{"location":"tutorials/02_multiplex_networks/","page":"Multiplex Networks","title":"Multiplex Networks","text":"Now we can compute marginal probabilities and correlation:","category":"page"},{"location":"tutorials/02_multiplex_networks/","page":"Multiplex Networks","title":"Multiplex Networks","text":"# Create a grid to evaluate the graphon\ngrid_size = 101\nx_range = range(0, 1, length=grid_size)\n\n# Marginal probability that layer 1 has an edge\np1 = [marginals(graphon_mvb(x, y))[1] for x in x_range, y in x_range]\n\n# Marginal probability that layer 2 has an edge\np2 = [marginals(graphon_mvb(x, y))[2] for x in x_range, y in x_range]\n\n# Correlation between layers\ncorr = [correlation_matrix(graphon_mvb(x, y))[1, 2] for x in x_range, y in x_range]\n\n# Visualize:\n\nfig = Figure(size=(900, 350))\n\nax1 = Axis(fig[1, 1],\n    title=\"P(Layer 1 edge)\",\n    aspect=1)\nax2 = Axis(fig[1, 2],\n    title=\"P(Layer 2 edge)\",\n    aspect=1)\nax3 = Axis(fig[1, 3],\n    title=\"Correlation\",\n    aspect=1)\nhidedecorations!.([ax1, ax2, ax3])\nhm1 = heatmap!(ax1, p1, colormap=:binary, colorrange=(0, 1))\nhm2 = heatmap!(ax2, p2, colormap=:binary, colorrange=(0, 1))\nhm3 = heatmap!(ax3, corr, colormap=:RdBu, colorrange=(-1, 1))\n\nColorbar(fig[2, 1:2], hm1, vertical=false,\n    label=\"Probability\", width=Relative(0.6), flipaxis=false)\nColorbar(fig[2, 3], hm3, vertical=false,\n    label=\"Correlation\", width=Relative(0.9), flipaxis=false)\n\nfig","category":"page"},{"location":"tutorials/02_multiplex_networks/","page":"Multiplex Networks","title":"Multiplex Networks","text":"Interpretation:","category":"page"},{"location":"tutorials/02_multiplex_networks/","page":"Multiplex Networks","title":"Multiplex Networks","text":"Left: Layer 1 has higher density in the top-right (high positions)\nMiddle: Layer 2 has periodic structure with multiple dense regions\nRight: Positive correlation (red) where both layers are active, negative correlation (blue) where they anti-correlate","category":"page"},{"location":"tutorials/02_multiplex_networks/#Creating-Block-Models-for-Multiplex-Networks","page":"Multiplex Networks","title":"Creating Block Models for Multiplex Networks","text":"","category":"section"},{"location":"tutorials/02_multiplex_networks/","page":"Multiplex Networks","title":"Multiplex Networks","text":"Just like simple graphons, we can discretize decorated graphons into block models for computational efficiency:","category":"page"},{"location":"tutorials/02_multiplex_networks/","page":"Multiplex Networks","title":"Multiplex Networks","text":"sbm_multiplex = empirical_graphon(graphon_mvb, 10)\n\nprintln(\"Block model type: \", typeof(sbm_multiplex))\nprintln(\"Number of blocks: \", length(sbm_multiplex.size))\n\n# Sample from the block model:\nA_sbm = sample_graph(sbm_multiplex, 200);\nnothing #hide","category":"page"},{"location":"tutorials/02_multiplex_networks/#Key-Takeaways","page":"Multiplex Networks","title":"Key Takeaways","text":"","category":"section"},{"location":"tutorials/02_multiplex_networks/","page":"Multiplex Networks","title":"Multiplex Networks","text":"Decorated graphons return distributions instead of probabilities\nMultiplex networks can be modeled with discrete distributions over edge categories\nCategory probabilities can encode complex layer interactions\nWe can analyze marginal probabilities and correlations between layers\nAll the same tools work: rand, sample_graph, empirical_graphon\nThe MVBernoulli package helps analyze correlations in binary multiplex networks","category":"page"},{"location":"tutorials/02_multiplex_networks/#Extensions","page":"Multiplex Networks","title":"Extensions","text":"","category":"section"},{"location":"tutorials/02_multiplex_networks/","page":"Multiplex Networks","title":"Multiplex Networks","text":"Decorated graphons can model many other structures:","category":"page"},{"location":"tutorials/02_multiplex_networks/","page":"Multiplex Networks","title":"Multiplex Networks","text":"Weighted networks: Use continuous distributions (Normal, Exponential, etc.)\nSigned networks: Positive and negative edges with distributions\nTemporal networks: Edge timing distributions\nAttributed graphs: Node or edge features from distributions","category":"page"},{"location":"tutorials/02_multiplex_networks/","page":"Multiplex Networks","title":"Multiplex Networks","text":"The flexibility of decorated graphons makes them a powerful tool for complex network modeling!","category":"page"},{"location":"tutorials/02_multiplex_networks/","page":"Multiplex Networks","title":"Multiplex Networks","text":"","category":"page"},{"location":"tutorials/02_multiplex_networks/","page":"Multiplex Networks","title":"Multiplex Networks","text":"This page was generated using Literate.jl.","category":"page"},{"location":"","page":"Home","title":"Home","text":"CurrentModule = Graphons","category":"page"},{"location":"#Graphons.jl","page":"Home","title":"Graphons.jl","text":"","category":"section"},{"location":"","page":"Home","title":"Home","text":"Documentation for Graphons.jl - A Julia package for sampling random graphs from graphon models.","category":"page"},{"location":"#Overview","page":"Home","title":"Overview","text":"","category":"section"},{"location":"","page":"Home","title":"Home","text":"Graphons are infinite-dimensional objects that represent the limit of large graphs. This package provides tools to:","category":"page"},{"location":"","page":"Home","title":"Home","text":"Define graphon models (continuous functions or block models)\nSample finite graphs from these models\nWork with decorated graphons that have rich edge attributes","category":"page"},{"location":"#Quick-Start","page":"Home","title":"Quick Start","text":"","category":"section"},{"location":"","page":"Home","title":"Home","text":"using Graphons\n\n# Create a simple continuous graphon\ng = SimpleContinuousGraphon((x, y) -> 0.3)\n\n# Sample a random graph with 100 nodes\nA = rand(g, 100)\n\n# Create a stochastic block model\nθ = [0.8 0.1; 0.1 0.8]  # High within-block, low between-block probability\nsizes = [0.5, 0.5]       # Equal-sized blocks\nsbm = SBM(θ, sizes)\nA = rand(sbm, 200)","category":"page"},{"location":"#Features","page":"Home","title":"Features","text":"","category":"section"},{"location":"","page":"Home","title":"Home","text":"Simple Graphons: Work with continuous probability functions on [0,1]²\nStochastic Block Models: Discrete graphons with block structure\nDecorated Graphons: Rich edge attributes using Distributions.jl or custom distributions\nExtensible: Easily add custom distribution types with just 2 methods\nFlexible Storage: Support for dense, sparse, and GraphBLAS matrices\nType Stability: Optimized performance through Julia's type system","category":"page"},{"location":"#Installation","page":"Home","title":"Installation","text":"","category":"section"},{"location":"","page":"Home","title":"Home","text":"using Pkg\nPkg.add(\"Graphons\")","category":"page"},{"location":"#Package-Structure","page":"Home","title":"Package Structure","text":"","category":"section"},{"location":"","page":"Home","title":"Home","text":"The package exports:","category":"page"},{"location":"","page":"Home","title":"Home","text":"Types: SimpleContinuousGraphon, SBM, DecoratedGraphon, DecoratedSBM\nFunctions: rand, sample_graph, empirical_graphon","category":"page"},{"location":"","page":"Home","title":"Home","text":"See the API Reference for detailed documentation.","category":"page"},{"location":"#Contents","page":"Home","title":"Contents","text":"","category":"section"},{"location":"","page":"Home","title":"Home","text":"Pages = [\"api.md\", \"graphs_type.md\", \"tutorials.md\"]\nDepth = 2","category":"page"},{"location":"tutorials/03_block_models/","page":"Stochastic Block Models","title":"Stochastic Block Models","text":"EditURL = \"../../literate/tutorials/03_block_models.jl\"","category":"page"},{"location":"tutorials/03_block_models/#Stochastic-Block-Models","page":"Stochastic Block Models","title":"Stochastic Block Models","text":"","category":"section"},{"location":"tutorials/03_block_models/","page":"Stochastic Block Models","title":"Stochastic Block Models","text":"This tutorial focuses on Stochastic Block Models (SBMs), which are discrete graphons where nodes belong to blocks (communities) and edge probabilities depend only on block membership.","category":"page"},{"location":"tutorials/03_block_models/","page":"Stochastic Block Models","title":"Stochastic Block Models","text":"SBMs are widely used in network analysis because they:","category":"page"},{"location":"tutorials/03_block_models/","page":"Stochastic Block Models","title":"Stochastic Block Models","text":"Capture community structure naturally\nAre computationally efficient\nHave well-understood statistical properties\nCan model various network architectures","category":"page"},{"location":"tutorials/03_block_models/#Setup","page":"Stochastic Block Models","title":"Setup","text":"","category":"section"},{"location":"tutorials/03_block_models/","page":"Stochastic Block Models","title":"Stochastic Block Models","text":"Load the packages we'll need:","category":"page"},{"location":"tutorials/03_block_models/","page":"Stochastic Block Models","title":"Stochastic Block Models","text":"using Graphons\nusing Random\nusing CairoMakie\n\nRandom.seed!(42)","category":"page"},{"location":"tutorials/03_block_models/#Understanding-Stochastic-Block-Models","page":"Stochastic Block Models","title":"Understanding Stochastic Block Models","text":"","category":"section"},{"location":"tutorials/03_block_models/","page":"Stochastic Block Models","title":"Stochastic Block Models","text":"An SBM is defined by two components:","category":"page"},{"location":"tutorials/03_block_models/","page":"Stochastic Block Models","title":"Stochastic Block Models","text":"Block probability matrix θ: A k×k matrix where θ[i,j] is the probability of an edge between a node in block i and a node in block j\nBlock sizes: The proportion of nodes in each block (must sum to 1)","category":"page"},{"location":"tutorials/03_block_models/","page":"Stochastic Block Models","title":"Stochastic Block Models","text":"For example, a 2-block model with equal-sized communities:","category":"page"},{"location":"tutorials/03_block_models/","page":"Stochastic Block Models","title":"Stochastic Block Models","text":"θ = [0.8 0.1; 0.1 0.8]  # High within-block, low between-block\nsizes = [0.5, 0.5]       # 50% in each block","category":"page"},{"location":"tutorials/03_block_models/#Example-1:-Assortative-Community-Structure","page":"Stochastic Block Models","title":"Example 1: Assortative Community Structure","text":"","category":"section"},{"location":"tutorials/03_block_models/","page":"Stochastic Block Models","title":"Stochastic Block Models","text":"Assortative networks have high within-block connectivity and low between-block connectivity. This creates distinct communities or clusters.","category":"page"},{"location":"tutorials/03_block_models/#Two-Communities","page":"Stochastic Block Models","title":"Two Communities","text":"","category":"section"},{"location":"tutorials/03_block_models/","page":"Stochastic Block Models","title":"Stochastic Block Models","text":"Let's create a network with two equal-sized communities:","category":"page"},{"location":"tutorials/03_block_models/","page":"Stochastic Block Models","title":"Stochastic Block Models","text":"θ_assort2 = [0.8 0.1; 0.1 0.8]\nsizes_assort2 = [0.5, 0.5]\n\nsbm_assort2 = SBM(θ_assort2, sizes_assort2)","category":"page"},{"location":"tutorials/03_block_models/","page":"Stochastic Block Models","title":"Stochastic Block Models","text":"Visualize the block structure:","category":"page"},{"location":"tutorials/03_block_models/","page":"Stochastic Block Models","title":"Stochastic Block Models","text":"fig = Figure(size=(800, 350))\nax1 = Axis(fig[1, 1],\n    title=\"Block Probability Matrix\",\n    xlabel=\"Block\",\n    ylabel=\"Block\",\n    aspect=1)\nax2 = Axis(fig[1, 2],\n    title=\"Sampled Graph (n=200)\",\n    aspect=1)\n\nheatmap!(ax1, θ_assort2, colormap=:binary, colorrange=(0, 1))\nhidedecorations!(ax2)\n\nA_assort2 = sample_graph(sbm_assort2, 200)\nheatmap!(ax2, A_assort2, colormap=:binary)\n\nColorbar(fig[1, 3], colormap=:binary, colorrange=(0, 1), label=\"Probability\")\n\nfig","category":"page"},{"location":"tutorials/03_block_models/","page":"Stochastic Block Models","title":"Stochastic Block Models","text":"The two blocks are clearly visible in the sampled graph!","category":"page"},{"location":"tutorials/03_block_models/#Three-Communities","page":"Stochastic Block Models","title":"Three Communities","text":"","category":"section"},{"location":"tutorials/03_block_models/","page":"Stochastic Block Models","title":"Stochastic Block Models","text":"Let's create a more complex structure with three communities of different sizes:","category":"page"},{"location":"tutorials/03_block_models/","page":"Stochastic Block Models","title":"Stochastic Block Models","text":"θ_assort3 = [0.9 0.1 0.05;\n             0.1 0.8 0.1;\n             0.05 0.1 0.85]\nsizes_assort3 = [0.3, 0.4, 0.3]\n\nsbm_assort3 = SBM(θ_assort3, sizes_assort3)\nA_assort3 = sample_graph(sbm_assort3, 200)\n\nfig = Figure(size=(800, 350))\nax1 = Axis(fig[1, 1],\n    title=\"3-Block Probability Matrix\",\n    xlabel=\"Block\",\n    ylabel=\"Block\",\n    aspect=1)\nax2 = Axis(fig[1, 2],\n    title=\"Sampled Graph (n=200)\",\n    aspect=1)\n\nheatmap!(ax1, θ_assort3, colormap=:binary, colorrange=(0, 1))\nhidedecorations!(ax2)\nheatmap!(ax2, A_assort3, colormap=:binary)\n\nColorbar(fig[1, 3], colormap=:binary, colorrange=(0, 1), label=\"Probability\")\n\nfig","category":"page"},{"location":"tutorials/03_block_models/","page":"Stochastic Block Models","title":"Stochastic Block Models","text":"Notice the three distinct blocks with different connection patterns!","category":"page"},{"location":"tutorials/03_block_models/#Example-2:-Disassortative-Core-Periphery-Structure","page":"Stochastic Block Models","title":"Example 2: Disassortative Core-Periphery Structure","text":"","category":"section"},{"location":"tutorials/03_block_models/","page":"Stochastic Block Models","title":"Stochastic Block Models","text":"Core-periphery networks have a densely connected core and a sparse periphery that primarily connects to the core, not to itself.","category":"page"},{"location":"tutorials/03_block_models/","page":"Stochastic Block Models","title":"Stochastic Block Models","text":"θ_cp = [0.8 0.4;    # Core is dense, core-periphery has medium connectivity\n        0.4 0.1]     # Periphery is sparse\nsizes_cp = [0.3, 0.7]  # Small core (30%), large periphery (70%)\n\nsbm_cp = SBM(θ_cp, sizes_cp)\nA_cp = sample_graph(sbm_cp, 200)\n\nfig = Figure(size=(800, 350))\nax1 = Axis(fig[1, 1],\n    title=\"Core-Periphery Structure\",\n    xlabel=\"Block\",\n    ylabel=\"Block\",\n    aspect=1)\nax2 = Axis(fig[1, 2],\n    title=\"Sampled Graph (n=200)\",\n    aspect=1)\n\nheatmap!(ax1, θ_cp, colormap=:binary, colorrange=(0, 1))\nhidedecorations!(ax2)\nheatmap!(ax2, A_cp, colormap=:binary)\n\nColorbar(fig[1, 3], colormap=:binary, colorrange=(0, 1), label=\"Probability\")\n\nfig","category":"page"},{"location":"tutorials/03_block_models/","page":"Stochastic Block Models","title":"Stochastic Block Models","text":"The small, dense core (top-left) is clearly visible, with sparser connections to the periphery.","category":"page"},{"location":"tutorials/03_block_models/#Example-3:-Hierarchical-Structure","page":"Stochastic Block Models","title":"Example 3: Hierarchical Structure","text":"","category":"section"},{"location":"tutorials/03_block_models/","page":"Stochastic Block Models","title":"Stochastic Block Models","text":"We can create hierarchical networks with multiple levels of organization:","category":"page"},{"location":"tutorials/03_block_models/","page":"Stochastic Block Models","title":"Stochastic Block Models","text":"θ_hier = [0.9 0.6 0.2 0.1;\n          0.6 0.9 0.1 0.2;\n          0.2 0.1 0.9 0.5;\n          0.1 0.2 0.5 0.9]\nsizes_hier = [0.25, 0.25, 0.25, 0.25]\n\nsbm_hier = SBM(θ_hier, sizes_hier)\nA_hier = sample_graph(sbm_hier, 200)\n\nfig = Figure(size=(800, 350))\nax1 = Axis(fig[1, 1],\n    title=\"Hierarchical Structure\",\n    xlabel=\"Block\",\n    ylabel=\"Block\",\n    aspect=1)\nax2 = Axis(fig[1, 2],\n    title=\"Sampled Graph (n=200)\",\n    aspect=1)\n\nheatmap!(ax1, θ_hier, colormap=:binary, colorrange=(0, 1))\nhidedecorations!(ax2)\nheatmap!(ax2, A_hier, colormap=:binary)\n\nColorbar(fig[1, 3], colormap=:binary, colorrange=(0, 1), label=\"Probability\")\n\nfig","category":"page"},{"location":"tutorials/03_block_models/","page":"Stochastic Block Models","title":"Stochastic Block Models","text":"This creates a two-level hierarchy: blocks 1-2 form one meta-community, blocks 3-4 form another, with weak connections between them.","category":"page"},{"location":"tutorials/03_block_models/#Example-4:-Erdős-Rényi-as-a-Special-Case","page":"Stochastic Block Models","title":"Example 4: Erdős-Rényi as a Special Case","text":"","category":"section"},{"location":"tutorials/03_block_models/","page":"Stochastic Block Models","title":"Stochastic Block Models","text":"The classic Erdős-Rényi random graph is just an SBM with one block:","category":"page"},{"location":"tutorials/03_block_models/","page":"Stochastic Block Models","title":"Stochastic Block Models","text":"θ_er = fill(0.3, 1, 1)\nsizes_er = [1.0]\n\nsbm_er = SBM(θ_er, sizes_er)\nA_er = sample_graph(sbm_er, 200)\n\nfig = Figure(size=(500, 450))\nax = Axis(fig[1, 1],\n    title=\"Erdős-Rényi G(n,p) with p=0.3\",\n    aspect=1)\nhidedecorations!(ax)\nheatmap!(ax, A_er, colormap=:binary)\nfig","category":"page"},{"location":"tutorials/03_block_models/","page":"Stochastic Block Models","title":"Stochastic Block Models","text":"Uniform random structure with no community organization.","category":"page"},{"location":"tutorials/03_block_models/#Comparing-Different-Structures","page":"Stochastic Block Models","title":"Comparing Different Structures","text":"","category":"section"},{"location":"tutorials/03_block_models/","page":"Stochastic Block Models","title":"Stochastic Block Models","text":"Let's compare all the structures side by side:","category":"page"},{"location":"tutorials/03_block_models/","page":"Stochastic Block Models","title":"Stochastic Block Models","text":"fig = Figure(size=(1400, 350))\nmodels = [\n    (\"2 Communities\", sbm_assort2),\n    (\"Core-Periphery\", sbm_cp),\n    (\"3 Communities\", sbm_assort3),\n    (\"Hierarchical\", sbm_hier)\n]\n\nfor (i, (title, sbm)) in enumerate(models)\n    ax = Axis(fig[1, i], title=title, aspect=1)\n    hidedecorations!(ax)\n    A = sample_graph(sbm, 200)\n    heatmap!(ax, A, colormap=:binary)\nend\n\nfig","category":"page"},{"location":"tutorials/03_block_models/","page":"Stochastic Block Models","title":"Stochastic Block Models","text":"Each structure creates distinct visual patterns in the adjacency matrix!","category":"page"},{"location":"tutorials/03_block_models/#From-Continuous-Graphons-to-Block-Models","page":"Stochastic Block Models","title":"From Continuous Graphons to Block Models","text":"","category":"section"},{"location":"tutorials/03_block_models/","page":"Stochastic Block Models","title":"Stochastic Block Models","text":"We can discretize any continuous graphon into an SBM using empirical_graphon:","category":"page"},{"location":"tutorials/03_block_models/","page":"Stochastic Block Models","title":"Stochastic Block Models","text":"W_smooth(x, y) = x * y\ngraphon_smooth = SimpleContinuousGraphon(W_smooth)\n\nsbm_from_graphon = empirical_graphon(graphon_smooth, 5)  # 5 blocks\n\nfig = Figure(size=(800, 350))\nax1 = Axis(fig[1, 1],\n    title=\"Continuous Graphon W(x,y)=xy\",\n    aspect=1)\nax2 = Axis(fig[1, 2],\n    title=\"5-Block Discretization\",\n    aspect=1)\n\nheatmap!(ax1, graphon_smooth, colormap=:binary, colorrange=(0, 1))\nheatmap!(ax2, sbm_from_graphon, colormap=:binary, colorrange=(0, 1))\n\nColorbar(fig[1, 3], colormap=:binary, colorrange=(0, 1), label=\"Probability\")\n\nfig","category":"page"},{"location":"tutorials/03_block_models/","page":"Stochastic Block Models","title":"Stochastic Block Models","text":"The SBM provides a piecewise-constant approximation of the smooth graphon.","category":"page"},{"location":"tutorials/03_block_models/#Analyzing-Block-Structure","page":"Stochastic Block Models","title":"Analyzing Block Structure","text":"","category":"section"},{"location":"tutorials/03_block_models/","page":"Stochastic Block Models","title":"Stochastic Block Models","text":"We can extract and analyze the block structure:","category":"page"},{"location":"tutorials/03_block_models/","page":"Stochastic Block Models","title":"Stochastic Block Models","text":"println(\"Block probability matrix:\")\nprintln(sbm_assort3.θ)\nprintln(\"\\nBlock sizes:\")\nprintln(sbm_assort3.size)\nprintln(\"\\nCumulative sizes (for latent position mapping):\")\nprintln(sbm_assort3.cumsize)","category":"page"},{"location":"tutorials/03_block_models/","page":"Stochastic Block Models","title":"Stochastic Block Models","text":"When sampling with explicit latents, the latent position determines block membership:","category":"page"},{"location":"tutorials/03_block_models/","page":"Stochastic Block Models","title":"Stochastic Block Models","text":"ξs = range(0, 1, length=200)\nA_ordered = sample_graph(sbm_assort3, ξs)\n\nfig = Figure(size=(500, 450))\nax = Axis(fig[1, 1],\n    title=\"3-Block SBM with Ordered Latents\",\n    aspect=1)\nhidedecorations!(ax)\nheatmap!(ax, A_ordered, colormap=:binary)\nfig","category":"page"},{"location":"tutorials/03_block_models/","page":"Stochastic Block Models","title":"Stochastic Block Models","text":"With ordered latents, the block boundaries are perfectly visible!","category":"page"},{"location":"tutorials/03_block_models/#Key-Takeaways","page":"Stochastic Block Models","title":"Key Takeaways","text":"","category":"section"},{"location":"tutorials/03_block_models/","page":"Stochastic Block Models","title":"Stochastic Block Models","text":"Stochastic Block Models discretize the graphon into k blocks\nAssortative SBMs create community structure (high within-block, low between-block)\nDisassortative SBMs create core-periphery or other mixing patterns\nBlock sizes can be unequal to model realistic heterogeneity\nAny continuous graphon can be discretized with empirical_graphon(graphon, k)\nSBMs are computationally efficient for large networks","category":"page"},{"location":"tutorials/03_block_models/#Next-Steps","page":"Stochastic Block Models","title":"Next Steps","text":"","category":"section"},{"location":"tutorials/03_block_models/","page":"Stochastic Block Models","title":"Stochastic Block Models","text":"For multiplex networks and rich edge attributes, see the Decorated Graphons tutorial\nFor smooth, continuous structures, use SimpleContinuousGraphon\nFor model selection, consider using statistical inference on real network data","category":"page"},{"location":"tutorials/03_block_models/","page":"Stochastic Block Models","title":"Stochastic Block Models","text":"","category":"page"},{"location":"tutorials/03_block_models/","page":"Stochastic Block Models","title":"Stochastic Block Models","text":"This page was generated using Literate.jl.","category":"page"}]
}
